{"version":3,"file":"routing.js","mappings":"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","sources":["webpack://routing/webpack/universalModuleDefinition","webpack://routing/../../../../../Trace.common.kt","webpack://routing/../../../../../AtomicFU.kt","webpack://routing/../../../../core/src/jsMain/kotlin/dev/fritz2/core/events.kt","webpack://routing/../../../../core/src/jsMain/kotlin/dev/fritz2/core/job.kt","webpack://routing/../../../../core/src/jsMain/kotlin/dev/fritz2/core/rendercontext.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Standard.kt","webpack://routing/../../../../core/src/jsMain/kotlin/dev/fritz2/core/mount.kt","webpack://routing/../../../../core/src/jsMain/kotlin/dev/fritz2/core/tags.kt","webpack://routing/../../../../core/src/jsMain/kotlin/dev/fritz2/core/listener.kt","webpack://routing/../../../../../SafeCollector.common.kt","webpack://routing/../../../../../Transform.kt","webpack://routing/../../../../core/src/jsMain/kotlin/dev/fritz2/core/store.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Arrays.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/Strings.kt","webpack://routing/../../../../core/src/jsMain/kotlin/dev/fritz2/core/foundation.kt","webpack://routing/../../../../core/src/jsMain/kotlin/dev/fritz2/core/scope.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Maps.kt","webpack://routing/../../../../core/src/jsMain/kotlin/dev/fritz2/core/handlers.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/dynamic.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Collections.kt","webpack://routing/../../../../core/src/jsMain/kotlin/dev/fritz2/routing/routing.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/string.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Lazy.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Collections.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Maps.kt","webpack://routing/../../../../core/src/jsMain/kotlin/dev/fritz2/core/attributes.kt","webpack://routing/../../../../examples/routing/src/jsMain/kotlin/dev/fritz2/examples/routing/routing.kt","webpack://routing/../../../../../<js-code>","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/coroutines/CoroutineContext.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Ranges.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/common/src/kotlin/ExceptionsH.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractList.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractMap.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/IndexedValue.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Iterables.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/HashMap.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/ReversedViews.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/SequenceBuilder.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Sets.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/coroutines/CoroutineContextImpl.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/coroutines/intrinsics/Intrinsics.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/internal/progressionUtil.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/ranges/PrimitiveRanges.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/ranges/ProgressionIterators.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/ranges/Progressions.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/Appendable.kt","webpack://routing/../../../../../runtime/typeCheckUtils.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/JsClass.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/Char.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/char.kt","webpack://routing/../../../../../src/generated/_ArraysJs.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Sequences.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Result.kt","webpack://routing/../../../../../src/kotlin/exceptions.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Tuples.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/runtime/primitiveCompanionObjects.kt","webpack://routing/../../../../../runtime/kotlinHacks.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableCollection.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableList.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableMap.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableSet.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/ArrayList.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Preconditions.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/HashSet.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/InternalHashCodeMap.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/LinkedHashMap.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/coroutines/cancellation/CancellationException.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/KClassImpl.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/primitives.kt","webpack://routing/../../../../../builtins/Library.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/reflection.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/StringBuilderJs.kt","webpack://routing/../../../../../src/generated/_WhitespaceChars.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/CharCode.kt","webpack://routing/../../../../../src/generated/_DigitChars.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/numberConversions.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/stringsCode.kt","webpack://routing/../../../../../builtins/Char.kt","webpack://routing/../../../../../builtins/Enum.kt","webpack://routing/../../../../../runtime/arrays.kt","webpack://routing/../../../../../runtime/bitUtils.kt","webpack://routing/../../../../../runtime/charSequence.kt","webpack://routing/../../../../../runtime/numberConversion.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/UShort.kt","webpack://routing/../../../../../runtime/collectionsHacks.kt","webpack://routing/../../../../../runtime/compareTo.kt","webpack://routing/../../../../../runtime/coreRuntime.kt","webpack://routing/../../../../../runtime/hacks.kt","webpack://routing/../../../../../runtime/long.kt","webpack://routing/../../../../../runtime/longjs.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/numbers.kt","webpack://routing/../../../../../runtime/rangeTo.kt","webpack://routing/../../../../../runtime/reflectRuntime.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/js.arrays/fill.kt","webpack://routing/../../../../../src/kotlin/coroutines_13/CoroutineImpl.kt","webpack://routing/../../../../../src/kotlin/coroutines_13/IntrinsicsJs.kt","webpack://routing/../../../../../src/kotlin/jsOperators.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractCollection.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractSet.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/PrimitiveIterators.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/coroutines/Continuation.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Sequences.kt","webpack://routing/../../../../../jsMainSources/core/builtins/src/kotlin/Unit.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/EqualityComparator.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Strings.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/InternalMap.kt","webpack://routing/../../../../../runtime/coroutineInternalJS.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/coroutines/ContinuationInterceptor.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/StringNumberConversions.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/throwableExtensions.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlinx/dom/Mutations.kt","webpack://routing/../../../../../Job.kt","webpack://routing/../../../../../Channel.kt","webpack://routing/../../../../../AbstractCoroutine.kt","webpack://routing/../../../../../Builders.common.kt","webpack://routing/../../../../../CancellableContinuation.kt","webpack://routing/../../../../../CompletionHandler.kt","webpack://routing/../../../../../DispatchedTask.kt","webpack://routing/../../../../../CancellableContinuationImpl.kt","webpack://routing/../../../../../AtomicFU.common.kt","webpack://routing/../../../../../CompletionState.kt","webpack://routing/../../../../../CoroutineDispatcher.kt","webpack://routing/../../../../../CoroutineExceptionHandler.kt","webpack://routing/../../../../../EventLoop.common.kt","webpack://routing/../../../../../Exceptions.common.kt","webpack://routing/../../../../../JobSupport.kt","webpack://routing/../../../../../Concurrent.kt","webpack://routing/../../../../../LinkedList.kt","webpack://routing/../../../../../Synchronized.kt","webpack://routing/../../../../../MainCoroutineDispatcher.kt","webpack://routing/../../../../../Supervisor.kt","webpack://routing/../../../../../Unconfined.kt","webpack://routing/../../../../../Yield.kt","webpack://routing/../../../../../DispatchedContinuation.kt","webpack://routing/../../../../../AbstractChannel.kt","webpack://routing/../../../../../InlineList.kt","webpack://routing/../../../../../ArrayChannel.kt","webpack://routing/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/math.kt","webpack://routing/../../../../../SystemProps.common.kt","webpack://routing/../../../../../SystemProps.kt","webpack://routing/../../../../../ChannelCoroutine.kt","webpack://routing/../../../../../Channels.common.kt","webpack://routing/../../../../../ConflatedChannel.kt","webpack://routing/../../../../../LinkedListChannel.kt","webpack://routing/../../../../../Produce.kt","webpack://routing/../../../../../RendezvousChannel.kt","webpack://routing/../../../../../Builders.kt","webpack://routing/../../../../../Channels.kt","webpack://routing/../../../../../StateFlow.kt","webpack://routing/../../../../../AbstractSharedFlow.kt","webpack://routing/../../../../../ChannelFlow.kt","webpack://routing/../../../../../FlowCoroutine.kt","webpack://routing/../../../../../Combine.kt","webpack://routing/../../../../../NullSurrogate.kt","webpack://routing/../../../../../Distinct.kt","webpack://routing/../../../../../Emitters.kt","webpack://routing/../../../../../Errors.kt","webpack://routing/../../../../../Share.kt","webpack://routing/../../../../../Zip.kt","webpack://routing/../../../../../Collect.kt","webpack://routing/../../../../../ArrayQueue.kt","webpack://routing/../../../../../Atomic.kt","webpack://routing/../../../../../CoroutineContext.kt","webpack://routing/../../../../../ThreadContext.kt","webpack://routing/../../../../../OnUndeliveredElement.kt","webpack://routing/../../../../../Scopes.kt","webpack://routing/../../../../../Symbol.kt","webpack://routing/../../../../../Cancellable.kt","webpack://routing/../../../../../Undispatched.kt","webpack://routing/../../../../../Mutex.kt","webpack://routing/../../../../../Window.kt","webpack://routing/../../../../../CoroutineExceptionHandlerImpl.kt","webpack://routing/../../../../../Debug.kt","webpack://routing/../../../../../Dispatchers.kt","webpack://routing/../../../../../EventLoop.kt","webpack://routing/../../../../../Exceptions.kt","webpack://routing/../../../../../JSDispatcher.kt","webpack://routing/../../../../../SafeCollector.kt","webpack://routing/../../../../../LocalAtomics.kt","webpack://routing/../../../../../StackTraceRecovery.kt","webpack://routing/../../../../../ThreadLocal.kt","webpack://routing/../../../../../CoroutineStart.kt","webpack://routing/../../../../../ProbesSupport.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/StringBuilder.kt","webpack://routing/../../../../../CompletionHandler.common.kt","webpack://routing/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/HashCode.kt","webpack://routing/../../../../../CoroutineScope.kt","webpack://routing/../../../../../SchedulerTask.kt","webpack://routing/webpack/bootstrap","webpack://routing/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"routing\"] = factory();\n\telse\n\t\troot[\"routing\"] = factory();\n})(this, () => {\nreturn ",null,null,"@file:Suppress(\"unused\")\n\npackage dev.fritz2.core\n\nimport kotlinx.browser.window\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.flow.*\nimport org.w3c.dom.*\nimport org.w3c.dom.Window\nimport org.w3c.dom.clipboard.ClipboardEvent\nimport org.w3c.dom.events.*\nimport org.w3c.xhr.ProgressEvent\n\n/**\n * Contains all javascript event types.\n * Take a look [here](https://www.w3schools.com/jsref/dom_obj_event.asp).\n *\n * Sometimes it is necessary to use a more generic type (like [Event])\n * because the type that is offered to the listener is not always consistent\n * (on different browsers, different actions, etc.)\n */\ninterface WithEvents<out T : EventTarget> {\n\n    /**\n     * Creates an [Listener] for the given event [eventName].\n     *\n     * @param eventName of the [Event] to listen for\n     */\n    fun <X : Event> subscribe(eventName: String, capture: Boolean = false, init: Event.() -> Unit = {}): Listener<X, T>\n\n    /**\n     * occurs when the loading of a media is aborted\n     */\n    val aborts get() = subscribe<Event>(\"abort\")\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     */\n    val afterprints get() = subscribe<Event>(\"afterprint\")\n\n    /**\n     * occurs when a page is about to be printed\n     */\n    val beforeprints get() = subscribe<Event>(\"beforeprint\")\n\n    /**\n     * occurs before the document is about to be unloaded\n     */\n    val beforeunloads get() = subscribe<Event>(\"beforeunload\")\n\n    /**\n     * occurs when an element loses focus\n     */\n    val blurs get() = subscribe<FocusEvent>(\"blur\")\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     */\n    val canplays get() = subscribe<Event>(\"canplay\")\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     */\n    val canplaythroughs get() = subscribe<Event>(\"canplaythrough\")\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     */\n    val changes get() = subscribe<Event>(\"change\")\n\n    /**\n     * occurs when the user clicks on an element\n     */\n    val clicks get() = subscribe<MouseEvent>(\"click\")\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     */\n    val contextmenus get() = subscribe<MouseEvent>(\"contextmenu\")\n\n    /**\n     * occurs when the user copies the content of an element\n     */\n    val copys get() = subscribe<ClipboardEvent>(\"copy\")\n\n    /**\n     * occurs when the user cuts the content of an element\n     */\n    val cuts get() = subscribe<ClipboardEvent>(\"cut\")\n\n    /**\n     * occurs when the user double-clicks on an element\n     */\n    val dblclicks get() = subscribe<MouseEvent>(\"dblclick\")\n\n    /**\n     * occurs when an element is being dragged\n     */\n    val drags get() = subscribe<DragEvent>(\"drag\")\n\n    /**\n     * occurs when the user has finished dragging an element\n     */\n    val dragends get() = subscribe<DragEvent>(\"dragend\")\n\n    /**\n     * occurs when the dragged element enters the drop target\n     */\n    val dragenters get() = subscribe<DragEvent>(\"dragenter\")\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     */\n    val dragleaves get() = subscribe<DragEvent>(\"dragleave\")\n\n    /**\n     * occurs when the dragged element is over the drop target\n     */\n    val dragovers get() = subscribe<DragEvent>(\"dragover\")\n\n    /**\n     * occurs when the user starts to drag an element\n     */\n    val dragstarts get() = subscribe<DragEvent>(\"dragstart\")\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     */\n    val drops get() = subscribe<DragEvent>(\"drop\")\n\n    /**\n     * occurs when the duration of the media is changed\n     */\n    val durationchanges get() = subscribe<Event>(\"durationchange\")\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     */\n    val endeds get() = subscribe<Event>(\"ended\")\n\n    /**\n     * occurs when an element gets focus\n     */\n    val focuss get() = subscribe<FocusEvent>(\"focus\")\n\n    /**\n     * occurs when an element is about to get focus\n     */\n    val focusins get() = subscribe<FocusEvent>(\"focusin\")\n\n    /**\n     * occurs when an element is about to lose focus\n     */\n    val focusouts get() = subscribe<FocusEvent>(\"focusout\")\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     */\n    val fullscreenchanges get() = subscribe<Event>(\"fullscreenchange\")\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     */\n    val fullscreenerrors get() = subscribe<Event>(\"fullscreenerror\")\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     */\n    val hashchanges get() = subscribe<HashChangeEvent>(\"hashchange\")\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     */\n    val inputs get() = subscribe<Event>(\"input\")\n\n    /**\n     * occurs when an element is invalid\n     */\n    val invalids get() = subscribe<Event>(\"invalid\")\n\n    /**\n     * occurs when the user is pressing a key\n     */\n    val keydowns get() = subscribe<KeyboardEvent>(\"keydown\")\n\n    /**\n     * occurs when the user presses a key\n     */\n    val keypresss get() = subscribe<KeyboardEvent>(\"keypress\")\n\n    /**\n     * occurs when the user releases a key\n     */\n    val keyups get() = subscribe<KeyboardEvent>(\"keyup\")\n\n    /**\n     * occurs when an object has loaded\n     */\n    val loads get() = subscribe<Event>(\"load\")\n\n    /**\n     * occurs when media data is loaded\n     */\n    val loadeddatas get() = subscribe<Event>(\"loadeddata\")\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     */\n    val loadedmetadatas get() = subscribe<Event>(\"loadedmetadata\")\n\n    /**\n     * occurs when the pointer is moved onto an element\n     */\n    val mouseenters get() = subscribe<MouseEvent>(\"mouseenter\")\n\n    /**\n     * occurs when the pointer is moved out of an element\n     */\n    val mouseleaves get() = subscribe<MouseEvent>(\"mouseleave\")\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     */\n    val mousemoves get() = subscribe<MouseEvent>(\"mousemove\")\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     */\n    val mouseovers get() = subscribe<MouseEvent>(\"mouseover\")\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     */\n    val mouseouts get() = subscribe<MouseEvent>(\"mouseout\")\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     */\n    val mouseups get() = subscribe<MouseEvent>(\"mouseup\")\n\n    /**\n     * occurs when the browser starts to work offline\n     */\n    val offlines get() = subscribe<Event>(\"offline\")\n\n    /**\n     * occurs when the browser starts to work online\n     */\n    val onlines get() = subscribe<Event>(\"online\")\n\n    /**\n     * occurs when a connection with the event source is opened\n     */\n    val opens get() = subscribe<Event>(\"open\")\n\n    /**\n     * occurs when the user navigates away from a webpage\n     */\n    val pagehides get() = subscribe<PageTransitionEvent>(\"pagehide\")\n\n    /**\n     * occurs when the user navigates to a webpage\n     */\n    val pageshows get() = subscribe<PageTransitionEvent>(\"pageshow\")\n\n    /**\n     * occurs when the user pastes some content in an element\n     */\n    val pastes get() = subscribe<ClipboardEvent>(\"paste\")\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     */\n    val loadstarts get() = subscribe<ProgressEvent>(\"loadstart\")\n\n    /**\n     * occurs when a message is received through the event source\n     */\n    val messages get() = subscribe<Event>(\"message\")\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     */\n    val mousedowns get() = subscribe<MouseEvent>(\"mousedown\")\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     */\n    val pauses get() = subscribe<Event>(\"pause\")\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     */\n    val plays get() = subscribe<Event>(\"play\")\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     */\n    val playings get() = subscribe<Event>(\"playing\")\n\n    /**\n     * occurs when the window's history changes\n     */\n    val popstates get() = subscribe<PopStateEvent>(\"popstate\")\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     */\n    val progresss get() = subscribe<Event>(\"progress\")\n\n    /**\n     * occurs when the playing speed of the media is changed\n     */\n    val ratechanges get() = subscribe<Event>(\"ratechange\")\n\n    /**\n     * occurs when the document view is resized\n     */\n    val resizes get() = subscribe<Event>(\"resize\")\n\n    /**\n     * occurs when a form is reset\n     */\n    val resets get() = subscribe<Event>(\"reset\")\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     */\n    val scrolls get() = subscribe<Event>(\"scroll\")\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     */\n    val searchs get() = subscribe<Event>(\"search\")\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     */\n    val seekeds get() = subscribe<Event>(\"seeked\")\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     */\n    val seekings get() = subscribe<Event>(\"seeking\")\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     */\n    val selects get() = subscribe<Event>(\"select\")\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     */\n    val shows get() = subscribe<Event>(\"show\")\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     */\n    val stalleds get() = subscribe<Event>(\"stalled\")\n\n    /**\n     * occurs when a Web Storage area is updated\n     */\n    val storages get() = subscribe<StorageEvent>(\"storage\")\n\n    /**\n     * occurs when a form is submitted\n     */\n    val submits get() = subscribe<Event>(\"submit\")\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     */\n    val suspends get() = subscribe<Event>(\"suspend\")\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     */\n    val timeupdates get() = subscribe<Event>(\"timeupdate\")\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     */\n    val toggles get() = subscribe<Event>(\"toggle\")\n\n    /**\n     * occurs when the touch is interrupted\n     */\n    val touchcancels get() = subscribe<TouchEvent>(\"touchcancel\")\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     */\n    val touchends get() = subscribe<TouchEvent>(\"touchend\")\n\n    /**\n     * occurs when a finger is dragged across the screen\n     */\n    val touchmoves get() = subscribe<TouchEvent>(\"touchmove\")\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     */\n    val touchstarts get() = subscribe<TouchEvent>(\"touchstart\")\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     */\n    val unloads get() = subscribe<Event>(\"unload\")\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     */\n    val volumechanges get() = subscribe<Event>(\"volumechange\")\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     */\n    val waitings get() = subscribe<Event>(\"waiting\")\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     */\n    val wheels get() = subscribe<WheelEvent>(\"wheel\")\n\n\n\n    /**\n     * occurs when the loading of a media is aborted\n     */\n    val abortsCaptured get() = subscribe<Event>(\"abort\", true)\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     */\n    val afterprintsCaptured get() = subscribe<Event>(\"afterprint\", true)\n\n    /**\n     * occurs when a page is about to be printed\n     */\n    val beforeprintsCaptured get() = subscribe<Event>(\"beforeprint\", true)\n\n    /**\n     * occurs before the document is about to be unloaded\n     */\n    val beforeunloadsCaptured get() = subscribe<Event>(\"beforeunload\", true)\n\n    /**\n     * occurs when an element loses focus\n     */\n    val blursCaptured get() = subscribe<FocusEvent>(\"blur\", true)\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     */\n    val canplaysCaptured get() = subscribe<Event>(\"canplay\", true)\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     */\n    val canplaythroughsCaptured get() = subscribe<Event>(\"canplaythrough\", true)\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     */\n    val changesCaptured get() = subscribe<Event>(\"change\", true)\n\n    /**\n     * occurs when the user clicks on an element\n     */\n    val clicksCaptured get() = subscribe<MouseEvent>(\"click\", true)\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     */\n    val contextmenusCaptured get() = subscribe<MouseEvent>(\"contextmenu\", true)\n\n    /**\n     * occurs when the user copies the content of an element\n     */\n    val copysCaptured get() = subscribe<ClipboardEvent>(\"copy\", true)\n\n    /**\n     * occurs when the user cuts the content of an element\n     */\n    val cutsCaptured get() = subscribe<ClipboardEvent>(\"cut\", true)\n\n    /**\n     * occurs when the user double-clicks on an element\n     */\n    val dblclicksCaptured get() = subscribe<MouseEvent>(\"dblclick\", true)\n\n    /**\n     * occurs when an element is being dragged\n     */\n    val dragsCaptured get() = subscribe<DragEvent>(\"drag\", true)\n\n    /**\n     * occurs when the user has finished dragging an element\n     */\n    val dragendsCaptured get() = subscribe<DragEvent>(\"dragend\", true)\n\n    /**\n     * occurs when the dragged element enters the drop target\n     */\n    val dragentersCaptured get() = subscribe<DragEvent>(\"dragenter\", true)\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     */\n    val dragleavesCaptured get() = subscribe<DragEvent>(\"dragleave\", true)\n\n    /**\n     * occurs when the dragged element is over the drop target\n     */\n    val dragoversCaptured get() = subscribe<DragEvent>(\"dragover\", true)\n\n    /**\n     * occurs when the user starts to drag an element\n     */\n    val dragstartsCaptured get() = subscribe<DragEvent>(\"dragstart\", true)\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     */\n    val dropsCaptured get() = subscribe<DragEvent>(\"drop\", true)\n\n    /**\n     * occurs when the duration of the media is changed\n     */\n    val durationchangesCaptured get() = subscribe<Event>(\"durationchange\", true)\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     */\n    val endedsCaptured get() = subscribe<Event>(\"ended\", true)\n\n    /**\n     * occurs when an element gets focus\n     */\n    val focussCaptured get() = subscribe<FocusEvent>(\"focus\", true)\n\n    /**\n     * occurs when an element is about to get focus\n     */\n    val focusinsCaptured get() = subscribe<FocusEvent>(\"focusin\", true)\n\n    /**\n     * occurs when an element is about to lose focus\n     */\n    val focusoutsCaptured get() = subscribe<FocusEvent>(\"focusout\", true)\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     */\n    val fullscreenchangesCaptured get() = subscribe<Event>(\"fullscreenchange\", true)\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     */\n    val fullscreenerrorsCaptured get() = subscribe<Event>(\"fullscreenerror\", true)\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     */\n    val hashchangesCaptured get() = subscribe<HashChangeEvent>(\"hashchange\", true)\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     */\n    val inputsCaptured get() = subscribe<Event>(\"input\", true)\n\n    /**\n     * occurs when an element is invalid\n     */\n    val invalidsCaptured get() = subscribe<Event>(\"invalid\", true)\n\n    /**\n     * occurs when the user is pressing a key\n     */\n    val keydownsCaptured get() = subscribe<KeyboardEvent>(\"keydown\", true)\n\n    /**\n     * occurs when the user presses a key\n     */\n    val keypresssCaptured get() = subscribe<KeyboardEvent>(\"keypress\", true)\n\n    /**\n     * occurs when the user releases a key\n     */\n    val keyupsCaptured get() = subscribe<KeyboardEvent>(\"keyup\", true)\n\n    /**\n     * occurs when an object has loaded\n     */\n    val loadsCaptured get() = subscribe<Event>(\"load\", true)\n\n    /**\n     * occurs when media data is loaded\n     */\n    val loadeddatasCaptured get() = subscribe<Event>(\"loadeddata\", true)\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     */\n    val loadedmetadatasCaptured get() = subscribe<Event>(\"loadedmetadata\", true)\n\n    /**\n     * occurs when the pointer is moved onto an element\n     */\n    val mouseentersCaptured get() = subscribe<MouseEvent>(\"mouseenter\", true)\n\n    /**\n     * occurs when the pointer is moved out of an element\n     */\n    val mouseleavesCaptured get() = subscribe<MouseEvent>(\"mouseleave\", true)\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     */\n    val mousemovesCaptured get() = subscribe<MouseEvent>(\"mousemove\", true)\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     */\n    val mouseoversCaptured get() = subscribe<MouseEvent>(\"mouseover\", true)\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     */\n    val mouseoutsCaptured get() = subscribe<MouseEvent>(\"mouseout\", true)\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     */\n    val mouseupsCaptured get() = subscribe<MouseEvent>(\"mouseup\", true)\n\n    /**\n     * occurs when the browser starts to work offline\n     */\n    val offlinesCaptured get() = subscribe<Event>(\"offline\", true)\n\n    /**\n     * occurs when the browser starts to work online\n     */\n    val onlinesCaptured get() = subscribe<Event>(\"online\", true)\n\n    /**\n     * occurs when a connection with the event source is opened\n     */\n    val opensCaptured get() = subscribe<Event>(\"open\", true)\n\n    /**\n     * occurs when the user navigates away from a webpage\n     */\n    val pagehidesCaptured get() = subscribe<PageTransitionEvent>(\"pagehide\", true)\n\n    /**\n     * occurs when the user navigates to a webpage\n     */\n    val pageshowsCaptured get() = subscribe<PageTransitionEvent>(\"pageshow\", true)\n\n    /**\n     * occurs when the user pastes some content in an element\n     */\n    val pastesCaptured get() = subscribe<ClipboardEvent>(\"paste\", true)\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     */\n    val loadstartsCaptured get() = subscribe<ProgressEvent>(\"loadstart\", true)\n\n    /**\n     * occurs when a message is received through the event source\n     */\n    val messagesCaptured get() = subscribe<Event>(\"message\", true)\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     */\n    val mousedownsCaptured get() = subscribe<MouseEvent>(\"mousedown\", true)\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     */\n    val pausesCaptured get() = subscribe<Event>(\"pause\", true)\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     */\n    val playsCaptured get() = subscribe<Event>(\"play\", true)\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     */\n    val playingsCaptured get() = subscribe<Event>(\"playing\", true)\n\n    /**\n     * occurs when the window's history changes\n     */\n    val popstatesCaptured get() = subscribe<PopStateEvent>(\"popstate\", true)\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     */\n    val progresssCaptured get() = subscribe<Event>(\"progress\", true)\n\n    /**\n     * occurs when the playing speed of the media is changed\n     */\n    val ratechangesCaptured get() = subscribe<Event>(\"ratechange\", true)\n\n    /**\n     * occurs when the document view is resized\n     */\n    val resizesCaptured get() = subscribe<Event>(\"resize\", true)\n\n    /**\n     * occurs when a form is reset\n     */\n    val resetsCaptured get() = subscribe<Event>(\"reset\", true)\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     */\n    val scrollsCaptured get() = subscribe<Event>(\"scroll\", true)\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     */\n    val searchsCaptured get() = subscribe<Event>(\"search\", true)\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     */\n    val seekedsCaptured get() = subscribe<Event>(\"seeked\", true)\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     */\n    val seekingsCaptured get() = subscribe<Event>(\"seeking\", true)\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     */\n    val selectsCaptured get() = subscribe<Event>(\"select\", true)\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     */\n    val showsCaptured get() = subscribe<Event>(\"show\", true)\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     */\n    val stalledsCaptured get() = subscribe<Event>(\"stalled\", true)\n\n    /**\n     * occurs when a Web Storage area is updated\n     */\n    val storagesCaptured get() = subscribe<StorageEvent>(\"storage\", true)\n\n    /**\n     * occurs when a form is submitted\n     */\n    val submitsCaptured get() = subscribe<Event>(\"submit\", true)\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     */\n    val suspendsCaptured get() = subscribe<Event>(\"suspend\", true)\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     */\n    val timeupdatesCaptured get() = subscribe<Event>(\"timeupdate\", true)\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     */\n    val togglesCaptured get() = subscribe<Event>(\"toggle\", true)\n\n    /**\n     * occurs when the touch is interrupted\n     */\n    val touchcancelsCaptured get() = subscribe<TouchEvent>(\"touchcancel\", true)\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     */\n    val touchendsCaptured get() = subscribe<TouchEvent>(\"touchend\", true)\n\n    /**\n     * occurs when a finger is dragged across the screen\n     */\n    val touchmovesCaptured get() = subscribe<TouchEvent>(\"touchmove\", true)\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     */\n    val touchstartsCaptured get() = subscribe<TouchEvent>(\"touchstart\", true)\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     */\n    val unloadsCaptured get() = subscribe<Event>(\"unload\", true)\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     */\n    val volumechangesCaptured get() = subscribe<Event>(\"volumechange\", true)\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     */\n    val waitingsCaptured get() = subscribe<Event>(\"waiting\", true)\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     */\n    val wheelsCaptured get() = subscribe<WheelEvent>(\"wheel\", true)\n}\n\n/**\n * Represents all [Event]s of the browser [window] object as [Event]-flows\n */\nobject Window : WithEvents<Window> {\n\n    private val scope = MainScope()\n\n    override fun <X : Event> subscribe(eventName: String, capture: Boolean, init: Event.() -> Unit): Listener<X, Window> =\n        Listener(window.subscribe<X, Window>(eventName, capture, init).shareIn(scope, SharingStarted.Lazily))\n\n    override val aborts by lazy { super.aborts }\n    override val afterprints by lazy { super.afterprints }\n    override val beforeprints by lazy { super.beforeprints }\n    override val beforeunloads by lazy { super.beforeunloads }\n    override val blurs by lazy { super.blurs }\n    override val canplays by lazy { super.canplays }\n    override val canplaythroughs by lazy { super.canplaythroughs }\n    override val changes by lazy { super.changes }\n    override val clicks by lazy { super.clicks }\n    override val contextmenus by lazy { super.contextmenus }\n    override val copys by lazy { super.copys }\n    override val cuts by lazy { super.cuts }\n    override val dblclicks by lazy { super.dblclicks }\n    override val drags by lazy { super.drags }\n    override val dragends by lazy { super.dragends }\n    override val dragenters by lazy { super.dragenters }\n    override val dragleaves by lazy { super.dragleaves }\n    override val dragovers by lazy { super.dragovers }\n    override val dragstarts by lazy { super.dragstarts }\n    override val drops by lazy { super.drops }\n    override val durationchanges by lazy { super.durationchanges }\n    override val endeds by lazy { super.endeds }\n    override val focuss by lazy { super.focuss }\n    override val focusins by lazy { super.focusins }\n    override val focusouts by lazy { super.focusouts }\n    override val fullscreenchanges by lazy { super.fullscreenchanges }\n    override val fullscreenerrors by lazy { super.fullscreenerrors }\n    override val hashchanges by lazy { super.hashchanges }\n    override val inputs by lazy { super.inputs }\n    override val invalids by lazy { super.invalids }\n    override val keydowns by lazy { super.keydowns }\n    override val keypresss by lazy { super.keypresss }\n    override val keyups by lazy { super.keyups }\n    override val loads by lazy { super.loads }\n    override val loadeddatas by lazy { super.loadeddatas }\n    override val loadedmetadatas by lazy { super.loadedmetadatas }\n    override val loadstarts by lazy { super.loadstarts }\n    override val messages by lazy { super.messages }\n    override val mousedowns by lazy { super.mousedowns }\n    override val mouseenters by lazy { super.mouseenters }\n    override val mouseleaves by lazy { super.mouseleaves }\n    override val mousemoves by lazy { super.mousemoves }\n    override val mouseovers by lazy { super.mouseovers }\n    override val mouseouts by lazy { super.mouseouts }\n    override val mouseups by lazy { super.mouseups }\n    override val offlines by lazy { super.offlines }\n    override val onlines by lazy { super.onlines }\n    override val opens by lazy { super.opens }\n    override val pagehides by lazy { super.pagehides }\n    override val pageshows by lazy { super.pageshows }\n    override val pastes by lazy { super.pastes }\n    override val pauses by lazy { super.pauses }\n    override val plays by lazy { super.plays }\n    override val playings by lazy { super.playings }\n    override val popstates by lazy { super.popstates }\n    override val progresss by lazy { super.progresss }\n    override val ratechanges by lazy { super.ratechanges }\n    override val resizes by lazy { super.resizes }\n    override val resets by lazy { super.resets }\n    override val scrolls by lazy { super.scrolls }\n    override val searchs by lazy { super.searchs }\n    override val seekeds by lazy { super.seekeds }\n    override val seekings by lazy { super.seekings }\n    override val selects by lazy { super.selects }\n    override val shows by lazy { super.shows }\n    override val stalleds by lazy { super.stalleds }\n    override val storages by lazy { super.storages }\n    override val submits by lazy { super.submits }\n    override val suspends by lazy { super.suspends }\n    override val timeupdates by lazy { super.timeupdates }\n    override val toggles by lazy { super.toggles }\n    override val touchcancels by lazy { super.touchcancels }\n    override val touchends by lazy { super.touchends }\n    override val touchmoves by lazy { super.touchmoves }\n    override val touchstarts by lazy { super.touchstarts }\n    override val unloads by lazy { super.unloads }\n    override val volumechanges by lazy { super.volumechanges }\n    override val waitings by lazy { super.waitings }\n    override val wheels by lazy { super.wheels }\n\n    override val abortsCaptured by lazy { super.abortsCaptured }\n    override val afterprintsCaptured by lazy { super.afterprintsCaptured }\n    override val beforeprintsCaptured by lazy { super.beforeprintsCaptured }\n    override val beforeunloadsCaptured by lazy { super.beforeunloadsCaptured }\n    override val blursCaptured by lazy { super.blursCaptured }\n    override val canplaysCaptured by lazy { super.canplaysCaptured }\n    override val canplaythroughsCaptured by lazy { super.canplaythroughsCaptured }\n    override val changesCaptured by lazy { super.changesCaptured }\n    override val clicksCaptured by lazy { super.clicksCaptured }\n    override val contextmenusCaptured by lazy { super.contextmenusCaptured }\n    override val copysCaptured by lazy { super.copysCaptured }\n    override val cutsCaptured by lazy { super.cutsCaptured }\n    override val dblclicksCaptured by lazy { super.dblclicksCaptured }\n    override val dragsCaptured by lazy { super.dragsCaptured }\n    override val dragendsCaptured by lazy { super.dragendsCaptured }\n    override val dragentersCaptured by lazy { super.dragentersCaptured }\n    override val dragleavesCaptured by lazy { super.dragleavesCaptured }\n    override val dragoversCaptured by lazy { super.dragoversCaptured }\n    override val dragstartsCaptured by lazy { super.dragstartsCaptured }\n    override val dropsCaptured by lazy { super.dropsCaptured }\n    override val durationchangesCaptured by lazy { super.durationchangesCaptured }\n    override val endedsCaptured by lazy { super.endedsCaptured }\n    override val focussCaptured by lazy { super.focussCaptured }\n    override val focusinsCaptured by lazy { super.focusinsCaptured }\n    override val focusoutsCaptured by lazy { super.focusoutsCaptured }\n    override val fullscreenchangesCaptured by lazy { super.fullscreenchangesCaptured }\n    override val fullscreenerrorsCaptured by lazy { super.fullscreenerrorsCaptured }\n    override val hashchangesCaptured by lazy { super.hashchangesCaptured }\n    override val inputsCaptured by lazy { super.inputsCaptured }\n    override val invalidsCaptured by lazy { super.invalidsCaptured }\n    override val keydownsCaptured by lazy { super.keydownsCaptured }\n    override val keypresssCaptured by lazy { super.keypresssCaptured }\n    override val keyupsCaptured by lazy { super.keyupsCaptured }\n    override val loadsCaptured by lazy { super.loadsCaptured }\n    override val loadeddatasCaptured by lazy { super.loadeddatasCaptured }\n    override val loadedmetadatasCaptured by lazy { super.loadedmetadatasCaptured }\n    override val loadstartsCaptured by lazy { super.loadstartsCaptured }\n    override val messagesCaptured by lazy { super.messagesCaptured }\n    override val mousedownsCaptured by lazy { super.mousedownsCaptured }\n    override val mouseentersCaptured by lazy { super.mouseentersCaptured }\n    override val mouseleavesCaptured by lazy { super.mouseleavesCaptured }\n    override val mousemovesCaptured by lazy { super.mousemovesCaptured }\n    override val mouseoversCaptured by lazy { super.mouseoversCaptured }\n    override val mouseoutsCaptured by lazy { super.mouseoutsCaptured }\n    override val mouseupsCaptured by lazy { super.mouseupsCaptured }\n    override val offlinesCaptured by lazy { super.offlinesCaptured }\n    override val onlinesCaptured by lazy { super.onlinesCaptured }\n    override val opensCaptured by lazy { super.opensCaptured }\n    override val pagehidesCaptured by lazy { super.pagehidesCaptured }\n    override val pageshowsCaptured by lazy { super.pageshowsCaptured }\n    override val pastesCaptured by lazy { super.pastesCaptured }\n    override val pausesCaptured by lazy { super.pausesCaptured }\n    override val playsCaptured by lazy { super.playsCaptured }\n    override val playingsCaptured by lazy { super.playingsCaptured }\n    override val popstatesCaptured by lazy { super.popstatesCaptured }\n    override val progresssCaptured by lazy { super.progresssCaptured }\n    override val ratechangesCaptured by lazy { super.ratechangesCaptured }\n    override val resizesCaptured by lazy { super.resizesCaptured }\n    override val resetsCaptured by lazy { super.resetsCaptured }\n    override val scrollsCaptured by lazy { super.scrollsCaptured }\n    override val searchsCaptured by lazy { super.searchsCaptured }\n    override val seekedsCaptured by lazy { super.seekedsCaptured }\n    override val seekingsCaptured by lazy { super.seekingsCaptured }\n    override val selectsCaptured by lazy { super.selectsCaptured }\n    override val showsCaptured by lazy { super.showsCaptured }\n    override val stalledsCaptured by lazy { super.stalledsCaptured }\n    override val storagesCaptured by lazy { super.storagesCaptured }\n    override val submitsCaptured by lazy { super.submitsCaptured }\n    override val suspendsCaptured by lazy { super.suspendsCaptured }\n    override val timeupdatesCaptured by lazy { super.timeupdatesCaptured }\n    override val togglesCaptured by lazy { super.togglesCaptured }\n    override val touchcancelsCaptured by lazy { super.touchcancelsCaptured }\n    override val touchendsCaptured by lazy { super.touchendsCaptured }\n    override val touchmovesCaptured by lazy { super.touchmovesCaptured }\n    override val touchstartsCaptured by lazy { super.touchstartsCaptured }\n    override val unloadsCaptured by lazy { super.unloadsCaptured }\n    override val volumechangesCaptured by lazy { super.volumechangesCaptured }\n    override val waitingsCaptured by lazy { super.waitingsCaptured }\n    override val wheelsCaptured by lazy { super.wheelsCaptured }\n}","package dev.fritz2.core\n\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.flow.*\nimport kotlinx.coroutines.plus\nimport org.w3c.dom.events.Event\n\n/**\n * Prints [Exception] to error-[console] by ignoring [CollectionLensGetException].\n */\ninternal fun printErrorIgnoreLensException(cause: Throwable) {\n    when(cause) {\n        is CollectionLensGetException -> {}\n        else -> console.error(cause)\n    }\n}\n\n/**\n * Marks a class that it has a [Job] to start coroutines with.\n */\ninterface WithJob {\n\n    /**\n     * [Job] for launching coroutines in.\n     */\n    val job: Job\n\n    /**\n     * Default error handler printing the error to console.\n     *\n     * @param cause Throwable to handle\n     */\n    fun errorHandler(cause: Throwable): Unit = printErrorIgnoreLensException(cause)\n\n    /**\n     * Connects a [Flow] to a [Handler].\n     *\n     * @param handler [Handler] that will be called for each action/event on the [Flow]\n     * @receiver [Flow] of action/events to bind to a [Handler]\n     */\n    infix fun <A> Flow<A>.handledBy(handler: Handler<A>) = handler.process(this, job)\n\n    /**\n     * Connects a [Flow] to a suspendable [execute] function.\n     *\n     * @param execute function that will be called for each action/event on the [Flow]\n     * @receiver [Flow] of action/events to bind to\n     */\n    infix fun <A> Flow<A>.handledBy(execute: suspend (A) -> Unit) =\n        this.onEach { execute(it) }.catch { errorHandler(it) }.launchIn(MainScope() + job)\n\n\n    /**\n     * Connects [Event]s to a [Handler].\n     *\n     * @receiver [Flow] which contains the [Event]\n     * @param handler that will handle the fired [Event]\n     */\n    infix fun <E : Event> Flow<E>.handledBy(handler: Handler<Unit>) =\n        handler.process(this.map { }, job)\n\n    /**\n     * Connects a [Flow] to a suspendable [execute] function.\n     *\n     * @receiver [Flow] which contains the [Event]\n     * @param execute function that will handle the fired [Event]\n     */\n    infix fun <E : Event> Flow<E>.handledBy(execute: suspend (E) -> Unit) =\n        this.onEach { execute(it) }.catch { errorHandler(it) }.launchIn(MainScope() + job)\n\n    /**\n     * Calls this handler exactly once.\n     *\n     * @param data parameter forwarded to the handler\n     */\n    operator fun <A> Handler<A>.invoke(data: A) = this.process(flowOnceOf(data), job)\n\n    /**\n     * Calls this handler exactly once.\n     */\n    operator fun Handler<Unit>.invoke() = this.process(flowOnceOf(Unit), job)\n\n}\n\n/**\n * Connects a [Flow] to a [Handler].\n *\n * @param handler [Handler] that will be called for each action/event on the [Flow]\n * @receiver [Flow] of action/events to bind to an [Handler]\n */\ninfix fun <A> Flow<A>.handledBy(handler: Handler<A>) = handler.process(this, Job())\n\n/**\n * Connects a [Flow] to a suspendable [execute] function.\n *\n * @param execute function that will be called for each action/event on the [Flow]\n * @receiver [Flow] of action/events to bind to an [Handler]\n */\ninfix fun <A> Flow<A>.handledBy(execute: suspend (A) -> Unit) =\n    this.onEach { execute(it) }.catch { printErrorIgnoreLensException(it) }.launchIn(MainScope() + Job())","@file:Suppress(\"unused\")\n\npackage dev.fritz2.core\n\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.cancelChildren\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.scan\nimport kotlinx.dom.clear\nimport org.w3c.dom.*\nimport kotlin.reflect.KClass\n\n/**\n * Context for rendering static and dynamical content\n */\ninterface RenderContext : WithJob, WithScope {\n\n    /**\n     * Renders the data of a [Flow] as [Tag]s to the DOM.\n     *\n     * @receiver [Flow] containing the data\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Flow<V>.render(into: Tag<HTMLElement>? = null, content: Tag<*>.(V) -> Unit) {\n        val target = into?.apply(SET_MOUNT_POINT_DATA_ATTRIBUTE)\n            ?: div(MOUNT_POINT_STYLE_CLASS, content = SET_MOUNT_POINT_DATA_ATTRIBUTE)\n\n        val mountContext = MountContext(Job(job), target)\n\n        mountSimple(job, this) {\n            mountContext.runBeforeUnmounts()\n            mountContext.job.cancelChildren()\n            target.domNode.clear()\n            content(mountContext, it)\n            mountContext.runAfterMounts()\n        }\n    }\n\n    /**\n     * Renders the data of a [Flow] only if the [predicate] is true.\n     *\n     * @receiver [Flow] containing the data\n     * @param predicate must be true for the value to be rendered\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Flow<V>.renderIf(\n        predicate: (V) -> Boolean,\n        into: Tag<HTMLElement>? = null,\n        content: Tag<*>.(V) -> Unit\n    ) {\n        render(into) {\n            if (predicate(it)) {\n                content(it)\n            }\n        }\n    }\n\n    /**\n     * Renders the non-null data of a [Flow].\n     *\n     * @receiver [Flow] containing the data\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Flow<V?>.renderNotNull(\n        into: Tag<HTMLElement>? = null,\n        content: Tag<*>.(V) -> Unit\n    ) {\n        render(into) {\n            if (it != null) {\n                content(it)\n            }\n        }\n    }\n\n    /**\n     * Renders the data of a [Flow] of type [W].\n     *\n     * @receiver [Flow] containing the data\n     * @param klass reference to the type we want to check\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    @Suppress(\"UNCHECKED_CAST\")\n    fun <W: Any> Flow<*>.renderIs(\n        klass: KClass<W>,\n        into: Tag<HTMLElement>? = null,\n        content: Tag<*>.(W) -> Unit\n    ) {\n        render(into) {\n            if (klass.isInstance(it)) {\n                content(it as W)\n            }\n        }\n    }\n\n    /**\n     * Renders each element of a [Flow]s content.\n     * Internally the [Patch]es are determined using Myer's diff-algorithm.\n     * This allows the detection of moves. Keep in mind, that no [Patch] is derived,\n     * when an element stays the same, but changes its internal values.\n     *\n     * @param idProvider function to identify a unique entity in the list\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param batch hide [into] while rendering patches. Useful to avoid flickering when you make many changes (like sorting)\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Flow<List<V>>.renderEach(\n        idProvider: IdProvider<V, *>? = null,\n        into: Tag<HTMLElement>? = null,\n        batch: Boolean = false,\n        content: RenderContext.(V) -> Tag<HTMLElement>\n    ) {\n        mountPatches(into, this, batch) { upstreamValues, mountPoints ->\n            upstreamValues.scan(Pair(emptyList(), emptyList())) { acc: Pair<List<V>, List<V>>, new ->\n                Pair(acc.second, new)\n            }.map { (old, new) ->\n                Myer.diff(old, new, idProvider).map { patch ->\n                    patch.map(job) { value, newJob ->\n                        val mountPoint = BuildContext(newJob, this, scope)\n                        content(mountPoint, value).also {\n                            mountPoints[it.domNode] = mountPoint\n                        }\n                    }\n                }\n            }\n        }\n\n\n    }\n\n    /**\n     * Renders each element of a [Store]s [List] content.\n     * Internally the [Patch]es are determined using Myer's diff-algorithm.\n     * This allows the detection of moves. Keep in mind, that no [Patch] is derived,\n     * when an element stays the same, but changes its internal values.\n     *\n     * @param idProvider function to identify a unique entity in the list\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Store<List<V>>.renderEach(\n        idProvider: IdProvider<V, *>,\n        into: Tag<HTMLElement>? = null,\n        content: RenderContext.(Store<V>) -> HtmlTag<HTMLElement>\n    ) {\n        val store = this\n        data.renderEach(idProvider, into) { value ->\n            content(store.mapByElement(value, idProvider))\n        }\n    }\n\n    /**\n     * Converts the content of a [Flow] to [String] by using [toString] method.\n     *\n     * @receiver [Flow] with content\n     * @return [Flow] with content as [String]\n     */\n    fun <T> Flow<T>.asString(): Flow<String> = this.map { it.toString() }\n\n    fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W\n\n    /**\n     * Evaluates the scope context and initializes a [ScopeContext]\n     * for setting new entries to the scope.\n     *\n     * @param context to evaluate\n     */\n    private inline fun evalScope(context: (ScopeContext.() -> Unit)): Scope {\n        return ScopeContext(this@RenderContext.scope).apply(context).scope\n    }\n\n    /**\n     * Creates a custom [HtmlTag] with the provided [content].\n     *\n     * @param tagName Name of the [HtmlTag] in DOM\n     * @param content content scope for inner [HtmlTag]s\n     * @return custom [HtmlTag]\n     */\n    fun custom(\n        tagName: String,\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<Element>.() -> Unit\n    ): HtmlTag<Element> =\n        register(HtmlTag(tagName, id, baseClass, job, evalScope(scope)), content)\n\n    fun a(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLAnchorElement>.() -> Unit\n    ): HtmlTag<HTMLAnchorElement> =\n        register(HtmlTag(\"a\", id, baseClass, job, evalScope(scope)), content)\n\n    fun area(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLAreaElement>.() -> Unit\n    ): HtmlTag<HTMLAreaElement> =\n        register(HtmlTag(\"area\", id, baseClass, job, evalScope(scope)), content)\n\n    fun br(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLBRElement>.() -> Unit\n    ): HtmlTag<HTMLBRElement> =\n        register(HtmlTag(\"br\", id, baseClass, job, evalScope(scope)), content)\n\n    fun button(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLButtonElement>.() -> Unit\n    ): HtmlTag<HTMLButtonElement> =\n        register(HtmlTag(\"button\", id, baseClass, job, evalScope(scope)), content)\n\n    fun canvas(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLCanvasElement>.() -> Unit\n    ): HtmlTag<HTMLCanvasElement> =\n        register(HtmlTag(\"canvas\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dl(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDListElement>.() -> Unit\n    ): HtmlTag<HTMLDListElement> =\n        register(HtmlTag(\"dl\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dt(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLSpanElement>.() -> Unit\n    ): HtmlTag<HTMLSpanElement> =\n        register(HtmlTag(\"dt\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dd(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLSpanElement>.() -> Unit\n    ): HtmlTag<HTMLSpanElement> =\n        register(HtmlTag(\"dd\", id, baseClass, job, evalScope(scope)), content)\n\n    fun data(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDataElement>.() -> Unit\n    ): HtmlTag<HTMLDataElement> =\n        register(HtmlTag(\"data\", id, baseClass, job, evalScope(scope)), content)\n\n    fun datalist(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDataListElement>.() -> Unit\n    ): HtmlTag<HTMLDataListElement> =\n        register(HtmlTag(\"datalist\", id, baseClass, job, evalScope(scope)), content)\n\n    fun details(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDetailsElement>.() -> Unit\n    ): HtmlTag<HTMLDetailsElement> =\n        register(HtmlTag(\"details\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dialog(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDialogElement>.() -> Unit\n    ): HtmlTag<HTMLDialogElement> =\n        register(HtmlTag(\"dialog\", id, baseClass, job, evalScope(scope)), content)\n\n    fun div(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDivElement>.() -> Unit\n    ): HtmlTag<HTMLDivElement> =\n        register(HtmlTag(\"div\", id, baseClass, job, evalScope(scope)), content)\n\n    fun embed(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLEmbedElement>.() -> Unit\n    ): HtmlTag<HTMLEmbedElement> =\n        register(HtmlTag(\"embed\", id, baseClass, job, evalScope(scope)), content)\n\n    fun fieldset(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLFieldSetElement>.() -> Unit\n    ): HtmlTag<HTMLFieldSetElement> =\n        register(HtmlTag(\"fieldset\", id, baseClass, job, evalScope(scope)), content)\n\n    fun form(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLFormElement>.() -> Unit\n    ): HtmlTag<HTMLFormElement> =\n        register(HtmlTag(\"form\", id, baseClass, job, evalScope(scope)), content)\n\n    fun hr(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHRElement>.() -> Unit\n    ): HtmlTag<HTMLHRElement> =\n        register(HtmlTag(\"hr\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h1(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h1\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h2(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h2\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h3(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h3\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h4(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h4\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h5(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h5\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h6(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h6\", id, baseClass, job, evalScope(scope)), content)\n\n    fun iframe(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLIFrameElement>.() -> Unit\n    ): HtmlTag<HTMLIFrameElement> =\n        register(HtmlTag(\"iframe\", id, baseClass, job, evalScope(scope)), content)\n\n    fun img(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLImageElement>.() -> Unit\n    ): HtmlTag<HTMLImageElement> =\n        register(HtmlTag(\"img\", id, baseClass, job, evalScope(scope)), content)\n\n    fun input(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLInputElement>.() -> Unit\n    ): HtmlTag<HTMLInputElement> =\n        register(HtmlTag(\"input\", id, baseClass, job, evalScope(scope)), content)\n\n    fun li(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLLIElement>.() -> Unit\n    ): HtmlTag<HTMLLIElement> =\n        register(HtmlTag(\"li\", id, baseClass, job, evalScope(scope)), content)\n\n    fun label(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLLabelElement>.() -> Unit\n    ): HtmlTag<HTMLLabelElement> =\n        register(HtmlTag(\"label\", id, baseClass, job, evalScope(scope)), content)\n\n    fun legend(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLLegendElement>.() -> Unit\n    ): HtmlTag<HTMLLegendElement> =\n        register(HtmlTag(\"legend\", id, baseClass, job, evalScope(scope)), content)\n\n    fun map(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLMapElement>.() -> Unit\n    ): HtmlTag<HTMLMapElement> =\n        register(HtmlTag(\"map\", id, baseClass, job, evalScope(scope)), content)\n\n    fun audio(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLAudioElement>.() -> Unit\n    ): HtmlTag<HTMLAudioElement> =\n        register(HtmlTag(\"audio\", id, baseClass, job, evalScope(scope)), content)\n\n    fun video(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLVideoElement>.() -> Unit\n    ): HtmlTag<HTMLVideoElement> =\n        register(HtmlTag(\"video\", id, baseClass, job, evalScope(scope)), content)\n\n    fun meter(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLMeterElement>.() -> Unit\n    ): HtmlTag<HTMLMeterElement> =\n        register(HtmlTag(\"meter\", id, baseClass, job, evalScope(scope)), content)\n\n    fun ins(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLModElement>.() -> Unit\n    ): HtmlTag<HTMLModElement> =\n        register(HtmlTag(\"ins\", id, baseClass, job, evalScope(scope)), content)\n\n    fun del(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLModElement>.() -> Unit\n    ): HtmlTag<HTMLModElement> =\n        register(HtmlTag(\"del\", id, baseClass, job, evalScope(scope)), content)\n\n    fun ol(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLOListElement>.() -> Unit\n    ): HtmlTag<HTMLOListElement> =\n        register(HtmlTag(\"ol\", id, baseClass, job, evalScope(scope)), content)\n\n    fun `object`(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLObjectElement>.() -> Unit\n    ): HtmlTag<HTMLObjectElement> =\n        register(HtmlTag(\"object\", id, baseClass, job, evalScope(scope)), content)\n\n    fun optgroup(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLOptGroupElement>.() -> Unit\n    ): HtmlTag<HTMLOptGroupElement> =\n        register(HtmlTag(\"optgroup\", id, baseClass, job, evalScope(scope)), content)\n\n    fun option(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLOptionElement>.() -> Unit\n    ): HtmlTag<HTMLOptionElement> =\n        register(HtmlTag(\"option\", id, baseClass, job, evalScope(scope)), content)\n\n    fun output(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLOutputElement>.() -> Unit\n    ): HtmlTag<HTMLOutputElement> =\n        register(HtmlTag(\"output\", id, baseClass, job, evalScope(scope)), content)\n\n    fun p(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLParagraphElement>.() -> Unit\n    ): HtmlTag<HTMLParagraphElement> =\n        register(HtmlTag(\"p\", id, baseClass, job, evalScope(scope)), content)\n\n    fun param(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLParamElement>.() -> Unit\n    ): HtmlTag<HTMLParamElement> =\n        register(HtmlTag(\"param\", id, baseClass, job, evalScope(scope)), content)\n\n    fun picture(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLPictureElement>.() -> Unit\n    ): HtmlTag<HTMLPictureElement> =\n        register(HtmlTag(\"picture\", id, baseClass, job, evalScope(scope)), content)\n\n    fun pre(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLPreElement>.() -> Unit\n    ): HtmlTag<HTMLPreElement> =\n        register(HtmlTag(\"pre\", id, baseClass, job, evalScope(scope)), content)\n\n    fun progress(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLProgressElement>.() -> Unit\n    ): HtmlTag<HTMLProgressElement> =\n        register(HtmlTag(\"progress\", id, baseClass, job, evalScope(scope)), content)\n\n    fun quote(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLQuoteElement>.() -> Unit\n    ): HtmlTag<HTMLQuoteElement> =\n        register(HtmlTag(\"quote\", id, baseClass, job, evalScope(scope)), content)\n\n    fun script(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLScriptElement>.() -> Unit\n    ): HtmlTag<HTMLScriptElement> =\n        register(HtmlTag(\"script\", id, baseClass, job, evalScope(scope)), content)\n\n    fun select(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLSelectElement>.() -> Unit\n    ): HtmlTag<HTMLSelectElement> =\n        register(HtmlTag(\"select\", id, baseClass, job, evalScope(scope)), content)\n\n    fun span(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLSpanElement>.() -> Unit\n    ): HtmlTag<HTMLSpanElement> =\n        register(HtmlTag(\"span\", id, baseClass, job, evalScope(scope)), content)\n\n    fun caption(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableCaptionElement>.() -> Unit\n    ): HtmlTag<HTMLTableCaptionElement> =\n        register(HtmlTag(\"caption\", id, baseClass, job, evalScope(scope)), content)\n\n    fun th(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableCellElement>.() -> Unit\n    ): HtmlTag<HTMLTableCellElement> =\n        register(HtmlTag(\"th\", id, baseClass, job, evalScope(scope)), content)\n\n    fun td(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableCellElement>.() -> Unit\n    ): HtmlTag<HTMLTableCellElement> =\n        register(HtmlTag(\"td\", id, baseClass, job, evalScope(scope)), content)\n\n    fun col(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableColElement>.() -> Unit\n    ): HtmlTag<HTMLTableColElement> =\n        register(HtmlTag(\"col\", id, baseClass, job, evalScope(scope)), content)\n\n    fun colgroup(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableColElement>.() -> Unit\n    ): HtmlTag<HTMLTableColElement> =\n        register(HtmlTag(\"colgroup\", id, baseClass, job, evalScope(scope)), content)\n\n    fun table(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableElement>.() -> Unit\n    ): HtmlTag<HTMLTableElement> =\n        register(HtmlTag(\"table\", id, baseClass, job, evalScope(scope)), content)\n\n    fun tr(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableRowElement>.() -> Unit\n    ): HtmlTag<HTMLTableRowElement> =\n        register(HtmlTag(\"tr\", id, baseClass, job, evalScope(scope)), content)\n\n    fun tfoot(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableSectionElement>.() -> Unit\n    ): HtmlTag<HTMLTableSectionElement> =\n        register(HtmlTag(\"tfoot\", id, baseClass, job, evalScope(scope)), content)\n\n    fun thead(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableSectionElement>.() -> Unit\n    ): HtmlTag<HTMLTableSectionElement> =\n        register(HtmlTag(\"thead\", id, baseClass, job, evalScope(scope)), content)\n\n    fun tbody(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableSectionElement>.() -> Unit\n    ): HtmlTag<HTMLTableSectionElement> =\n        register(HtmlTag(\"tbody\", id, baseClass, job, evalScope(scope)), content)\n\n    fun textarea(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTextAreaElement>.() -> Unit\n    ): HtmlTag<HTMLTextAreaElement> =\n        register(HtmlTag(\"textarea\", id, baseClass, job, evalScope(scope)), content)\n\n    fun time(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTimeElement>.() -> Unit\n    ): HtmlTag<HTMLTimeElement> =\n        register(HtmlTag(\"time\", id, baseClass, job, evalScope(scope)), content)\n\n    fun track(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTrackElement>.() -> Unit\n    ): HtmlTag<HTMLTrackElement> =\n        register(HtmlTag(\"track\", id, baseClass, job, evalScope(scope)), content)\n\n    fun ul(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLUListElement>.() -> Unit\n    ): HtmlTag<HTMLUListElement> =\n        register(HtmlTag(\"ul\", id, baseClass, job, evalScope(scope)), content)\n\n    fun address(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"address\", id, baseClass, job, evalScope(scope)), content)\n\n    fun article(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"article\", id, baseClass, job, evalScope(scope)), content)\n\n    fun aside(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"aside\", id, baseClass, job, evalScope(scope)), content)\n\n    fun bdi(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"bdi\", id, baseClass, job, evalScope(scope)), content)\n\n    fun figcaption(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"figcaption\", id, baseClass, job, evalScope(scope)), content)\n\n    fun figure(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"figure\", id, baseClass, job, evalScope(scope)), content)\n\n    fun footer(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"footer\", id, baseClass, job, evalScope(scope)), content)\n\n    fun header(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"header\", id, baseClass, job, evalScope(scope)), content)\n\n    fun main(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"main\", id, baseClass, job, evalScope(scope)), content)\n\n    fun mark(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"mark\", id, baseClass, job, evalScope(scope)), content)\n\n    fun nav(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"nav\", id, baseClass, job, evalScope(scope)), content)\n\n    fun noscript(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"noscript\", id, baseClass, job, evalScope(scope)), content)\n\n    fun rp(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"rp\", id, baseClass, job, evalScope(scope)), content)\n\n    fun rt(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"rt\", id, baseClass, job, evalScope(scope)), content)\n\n    fun ruby(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"ruby\", id, baseClass, job, evalScope(scope)), content)\n\n    fun section(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"section\", id, baseClass, job, evalScope(scope)), content)\n\n    fun summary(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"summary\", id, baseClass, job, evalScope(scope)), content)\n\n    fun wbr(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"wbr\", id, baseClass, job, evalScope(scope)), content)\n\n    fun blockquote(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLQuoteElement>.() -> Unit\n    ): HtmlTag<HTMLQuoteElement> =\n        register(HtmlTag(\"blockquote\", id, baseClass, job, evalScope(scope)), content)\n\n    fun em(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"em\", id, baseClass, job, evalScope(scope)), content)\n\n    fun strong(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"strong\", id, baseClass, job, evalScope(scope)), content)\n\n    fun s(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"s\", id, baseClass, job, evalScope(scope)), content)\n\n    fun cite(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"cite\", id, baseClass, job, evalScope(scope)), content)\n\n    fun q(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLQuoteElement>.() -> Unit\n    ): HtmlTag<HTMLQuoteElement> =\n        register(HtmlTag(\"q\", id, baseClass, job, evalScope(scope)), content)\n    \n    fun dfn(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"dfn\", id, baseClass, job, evalScope(scope)), content)\n\n    fun abbr(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"abbr\", id, baseClass, job, evalScope(scope)), content)\n\n    fun code(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"code\", id, baseClass, job, evalScope(scope)), content)\n\n    fun `var`(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"var\", id, baseClass, job, evalScope(scope)), content)\n    \n    fun samp(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"samp\", id, baseClass, job, evalScope(scope)), content)\n\n    fun kbd(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"kbd\", id, baseClass, job, evalScope(scope)), content)\n\n    fun sub(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"sub\", id, baseClass, job, evalScope(scope)), content)\n\n    fun sup(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"sup\", id, baseClass, job, evalScope(scope)), content)\n\n    fun i(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"i\", id, baseClass, job, evalScope(scope)), content)\n\n    fun b(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"b\", id, baseClass, job, evalScope(scope)), content)\n\n    fun u(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"u\", id, baseClass, job, evalScope(scope)), content)\n\n    fun bdo(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"bdo\", id, baseClass, job, evalScope(scope)), content)\n\n    fun command(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"command\", id, baseClass, job, evalScope(scope)), content)\n\n    fun svg(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: SvgTag.() -> Unit\n    ): SvgTag =\n        register(SvgTag(\"svg\", id, baseClass, job = job, evalScope(scope)), content)\n\n    fun path(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: SvgTag.() -> Unit\n    ): SvgTag =\n        register(SvgTag(\"path\", id, baseClass, job = job, evalScope(scope)), content)\n}\n",null,"package dev.fritz2.core\n\nimport kotlinx.browser.document\nimport kotlinx.coroutines.*\nimport kotlinx.coroutines.flow.*\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.sync.withLock\nimport kotlinx.dom.clear\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.Node\n\n/**\n * Defines type for a handler for lifecycle-events\n */\ntypealias DomLifecycleHandler = suspend (WithDomNode<Element>, Any?) -> Unit\n\ninternal class DomLifecycleListener(\n    val target: WithDomNode<Element>,\n    val payload: Any? = null,\n    val handler: DomLifecycleHandler\n)\n\n/**\n * External interface to access the MountPoint where the lifecycle of [Tag]s and subtrees is handled.\n */\ninterface MountPoint {\n\n    /**\n     * Registers a [DomLifecycleHandler] on a given target that ist called right after the target is mounted to the DOM.\n     *\n     * @param target the element the lifecycle-handler will be registered for\n     * @param payload some optional data that might be used by the [handler] to do its work\n     * @param handler defines, what to do (with [payload]), when [target] has just been mounted to the DOM\n     */\n    fun afterMount(target: WithDomNode<Element>, payload: Any? = null, handler: DomLifecycleHandler)\n\n    /**\n     * Registers a [DomLifecycleHandler] on a given target that ist called right before the target is removed from the DOM.\n     *\n     * @param target the element the lifecycle-handler will be registered for\n     * @param payload some optional data that might be used by the [handler] to do its work\n     * @param handler defines, what to do (with [payload]), when [target] has just been mounted to the DOM\n     */\n    fun beforeUnmount(target: WithDomNode<Element>, payload: Any? = null, handler: DomLifecycleHandler)\n}\n\ninternal abstract class MountPointImpl : MountPoint, WithJob {\n\n    val mutex = Mutex()\n\n    suspend fun runBeforeUnmounts() = mutex.withLock {\n        if (job.isActive) {\n            (MainScope() + job).launch {\n                beforeUnmountListeners.forEach {\n                    try {\n                        it.handler(it.target, it.payload)\n                    } catch (e: Exception) {\n                        console.error(\"Error in beforeUnmounts\", e)\n                    }\n                }\n                beforeUnmountListeners.clear()\n            }.join()\n        }\n    }\n\n    suspend fun runAfterMounts() {\n        (MainScope() + job).launch {\n            afterMountListeners.forEach {\n                try {\n                    it.handler(it.target, it.payload)\n                } catch (e: Exception) {\n                    console.error(\"Error in afterMounts\", e)\n                }\n            }\n            afterMountListeners.clear()\n        }\n    }\n\n    private val afterMountListeners: MutableList<DomLifecycleListener> = mutableListOf()\n\n    private val beforeUnmountListeners: MutableList<DomLifecycleListener> = mutableListOf()\n\n    override fun afterMount(target: WithDomNode<Element>, payload: Any?, handler: DomLifecycleHandler) {\n        afterMountListeners.add(DomLifecycleListener(target, payload, handler))\n    }\n\n    override fun beforeUnmount(target: WithDomNode<Element>, payload: Any?, handler: DomLifecycleHandler) {\n        beforeUnmountListeners.add(DomLifecycleListener(target, payload, handler))\n    }\n}\n\ninternal val MOUNT_POINT_KEY = Scope.Key<MountPoint>(\"MOUNT_POINT\")\n\n/**\n * Allows to access the nearest [MountPoint] from any [WithScope]\n */\nfun WithScope.mountPoint(): MountPoint? = this.scope[MOUNT_POINT_KEY]\n\n/**\n * Convenience method to register lifecycle handler for after a [Tag] is mounted\n *\n * @param handler [DomLifecycleHandler] to be called on this [Tag] after it is mounted to the DOM\n * @param payload optional payload the handler requires\n * @receiver the [Tag] to register the lifecycle handler for\n */\nfun <T : Element> Tag<T>.afterMount(payload: Any? = null, handler: DomLifecycleHandler) {\n    mountPoint()?.afterMount(this, payload, handler)\n}\n\n/**\n * Convenience method to register lifecycle handler for before a [Tag] is unmounted\n *\n * @param handler [DomLifecycleHandler] to be called on this [Tag] before it is removed from the DOM\n * @param payload optional payload the handler requires\n * @receiver the [Tag] to register the lifecycle handler for\n */\nfun <T : Element> Tag<T>.beforeUnmount(payload: Any? = null, handler: DomLifecycleHandler) {\n    mountPoint()?.beforeUnmount(this, payload, handler)\n}\n\ninternal class MountContext<T : HTMLElement>(\n    override val job: Job,\n    val target: Tag<T>,\n    mountScope: Scope = target.scope,\n) : Tag<HTMLElement>, MountPointImpl() {\n\n    override val domNode: HTMLElement = target.domNode\n    override val id = target.id\n    override val baseClass = target.baseClass\n    override fun addToClasses(classesToAdd: String) = target.addToClasses(classesToAdd)\n    override fun addToClasses(classesToAdd: Flow<String>) = target.addToClasses(classesToAdd)\n    override val annex: RenderContext = target.annex\n\n    override val scope: Scope = Scope(mountScope).apply { set(MOUNT_POINT_KEY, this@MountContext) }\n\n    override fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W {\n        return target.register(element, content)\n    }\n\n    init {\n        target.beforeUnmount { _, _ -> runBeforeUnmounts() }\n    }\n}\n\ninternal class BuildContext(\n    override val job: Job,\n    target: Tag<*>,\n    mountScope: Scope,\n) : RenderContext, MountPointImpl() {\n\n    override val scope: Scope = Scope(mountScope).apply { set(MOUNT_POINT_KEY, this@BuildContext) }\n\n    override fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W {\n        content(element)\n        return element\n    }\n\n    init {\n        target.beforeUnmount { _, _ -> runBeforeUnmounts() }\n    }\n}\n\n/**\n * Defines the dedicated style class, that any mount-point will get by default.\n * Its only purpose is to exclude the mount-point tag to appear in the visual representation of the DOM.\n */\nconst val MOUNT_POINT_STYLE_CLASS = \"mount-point\"\n\ninternal val SET_MOUNT_POINT_DATA_ATTRIBUTE: Tag<*>.() -> Unit = {\n    attr(\"data-mount-point\", true)\n}\n\n/**\n * collects the values of a given [Flow] one by one.\n * Use this for data-types that represent a single (simple or complex) value.\n *\n * @param parentJob parent Job for starting a new coroutine\n * @param upstream returns the Flow that should be mounted at this point\n * @param collect function which getting called when values are changing (rerender)\n */\ninline fun <T> mountSimple(parentJob: Job, upstream: Flow<T>, crossinline collect: suspend (T) -> Unit) {\n    (MainScope() + parentJob).launch(start = CoroutineStart.UNDISPATCHED) {\n        upstream.distinctUntilChanged().onEach { collect(it) }.catch {\n            when (it) {\n                is CollectionLensGetException -> {}\n                else -> console.error(it)\n            }\n            // do not do anything here but canceling the coroutine, because this is an expected\n            // behaviour when dealing with filtering, renderEach and idProvider\n            cancel(\"error mounting\", it)\n        }.collect()\n    }\n}\n\n/**\n * Mounts a [Flow] of [Patch]es to the DOM either\n *  - creating a new context-Div as a child of the receiver\n *  - or, if [into] is set, replacing all children of this [Tag].\n *\n * @param into if set defines the target to mount the content to (replacing its static content)\n * @param upstream the [Flow] that should be mounted\n * @param batch hide [into] while rendering patches. Useful to avoid flickering when you make many changes (like sorting)\n * @param createPatches lambda defining, how to compare two versions of a [List]\n */\ninternal fun <V> RenderContext.mountPatches(\n    into: Tag<HTMLElement>?,\n    upstream: Flow<List<V>>,\n    batch: Boolean,\n    createPatches: Tag<HTMLElement>.(Flow<List<V>>, MutableMap<Node, MountPointImpl>) -> Flow<List<Patch<Tag<HTMLElement>>>>,\n) {\n    val target = into?.apply {\n        this.domNode.clear()\n        SET_MOUNT_POINT_DATA_ATTRIBUTE()\n    } ?: div(MOUNT_POINT_STYLE_CLASS, content = SET_MOUNT_POINT_DATA_ATTRIBUTE)\n\n    val mountPoints = mutableMapOf<Node, MountPointImpl>()\n\n    mountSimple(\n        target.job,\n        createPatches(target, upstream.onEach { if (batch) target.inlineStyle(\"visibility: hidden;\") }, mountPoints)\n    ) { patches ->\n        patches.forEach { patch ->\n            when (patch) {\n                is Patch.Insert -> insert(target.domNode, mountPoints, patch.element, patch.index)\n                is Patch.InsertMany -> insertMany(target.domNode, mountPoints, patch.elements, patch.index)\n                is Patch.Delete -> delete(target.domNode, mountPoints, patch.start, patch.count, target.job)\n                is Patch.Move -> move(target.domNode, patch.from, patch.to)\n            }\n        }\n\n        if (batch) {\n            kotlinx.browser.window.awaitAnimationFrame()\n            target.inlineStyle(\"\")\n        }\n    }\n}\n\n\n/**\n * Inserts or appends elements to the DOM.\n *\n * @receiver target DOM-Node\n * @param child Node to insert or append\n * @param index place to insert or append\n */\nprivate fun insertOrAppend(target: Node, child: Node, index: Int) {\n    if (index == target.childNodes.length) target.appendChild(child)\n    else target.childNodes.item(index)?.let {\n        target.insertBefore(child, it)\n    }\n}\n\n/**\n * Inserts or appends elements to the DOM.\n *\n * @receiver target DOM-Node\n * @param element from type [WithDomNode]\n * @param index place to insert or append\n */\nprivate suspend inline fun insert(target: Node, mountPoints: MutableMap<Node, MountPointImpl>, element: WithDomNode<*>, index: Int) {\n    insertOrAppend(target, element.domNode, index)\n    mountPoints[element.domNode]?.runAfterMounts()\n}\n\n/**\n * Inserts a [List] of elements to the DOM.\n *\n * @receiver target DOM-Node\n * @param elements [List] of [WithDomNode]s elements to insert\n * @param index place to insert or append\n */\nprivate suspend inline fun insertMany(target: Node, mountPoints: MutableMap<Node, MountPointImpl>, elements: List<WithDomNode<*>>, index: Int) {\n    val f = document.createDocumentFragment()\n    for (child in elements) {\n        f.append(child.domNode)\n        mountPoints[child.domNode]?.runAfterMounts()\n    }\n    insertOrAppend(target, f, index)\n}\n\n/**\n * Deletes elements from the DOM.\n *\n * @receiver target DOM-Node\n * @param start position for deleting\n * @param count of elements to delete\n */\n private suspend inline fun delete(target: Node, mountPoints: MutableMap<Node, MountPointImpl>, start: Int, count: Int, parentJob: Job) {\n    var itemToDelete = target.childNodes.item(start)\n    repeat(count) {\n        itemToDelete?.let {\n            mountPoints.remove(it)?.let { mountPoint ->\n                (MainScope() + parentJob).launch {\n                    mountPoint.runBeforeUnmounts()\n                    mountPoint.job.cancelChildren()\n                    target.removeChild(it)\n                }\n            }\n            itemToDelete = it.nextSibling\n        }\n    }\n}\n\n/**\n * Moves elements from on place to another in the DOM.\n *\n * @receiver target DOM-Node\n * @param from position index\n * @param to position index\n */\nprivate fun move(target: Node, from: Int, to: Int) {\n    val itemToMove = target.childNodes.item(from)\n    if (itemToMove != null) insertOrAppend(target, itemToMove, to)\n}\n\n","package dev.fritz2.core\n\nimport kotlinx.browser.document\nimport kotlinx.browser.window\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.flow.*\nimport kotlinx.dom.clear\nimport org.w3c.dom.Element\nimport org.w3c.dom.Node\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.svg.SVGElement\n\n/**\n * A marker to separate the layers of calls in the type-safe-builder pattern.\n */\n@DslMarker\nannotation class HtmlTagMarker\n\n/**\n * Represents a tag.\n * Sorry for the name, but we needed to delimit it from the [Element] it is wrapping.\n */\ninterface Tag<out E : Element> : RenderContext, WithDomNode<E>, WithEvents<E> {\n\n    /**\n     * id of this [Tag]\n     */\n    val id: String?\n\n    /**\n     * constant css-classes of this [Tag]\n     */\n    val baseClass: String?\n\n    /**\n     * Sets an attribute.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun attr(name: String, value: String) {\n        domNode.setAttribute(name, value)\n    }\n\n    /**\n     * Sets an attribute only if its [value] is not null.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun attr(name: String, value: String?) {\n        if (value != null) domNode.setAttribute(name, value)\n        else domNode.removeAttribute(name)\n    }\n\n    /**\n     * Sets an attribute.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun attr(name: String, value: Flow<String>) {\n        mountSimple(job, value) { v -> attr(name, v) }\n    }\n\n    /**\n     * Sets an attribute only for all none null values of the flow.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun attr(name: String, value: Flow<String?>) {\n        mountSimple(job, value) { v -> attr(name, v) }\n    }\n\n    /**\n     * Sets an attribute.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun <T> attr(name: String, value: T) {\n        attr(name, value?.toString())\n    }\n\n    /**\n     * Sets an attribute.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun <T> attr(name: String, value: Flow<T>) {\n        mountSimple(job, value.map { it?.toString() }) { v -> attr(name, v) }\n    }\n\n    /**\n     * Sets an attribute when [value] is true otherwise removes it.\n     *\n     * @param name to use\n     * @param value for decision\n     * @param trueValue value to use if attribute is set (default \"\")\n     */\n    fun attr(name: String, value: Boolean, trueValue: String = \"\") {\n        if (value) domNode.setAttribute(name, trueValue)\n        else domNode.removeAttribute(name)\n    }\n\n    /**\n     * Sets an attribute when [value] is true otherwise removes it.\n     *\n     * @param name to use\n     * @param value for decision\n     * @param trueValue value to use if attribute is set (default \"\")\n     */\n    fun attr(name: String, value: Boolean?, trueValue: String = \"\") {\n        if (value != null && value) domNode.setAttribute(name, trueValue)\n        else domNode.removeAttribute(name)\n    }\n\n    /**\n     * Sets an attribute when [value] is true otherwise removes it.\n     *\n     * @param name to use\n     * @param value for decision\n     * @param trueValue value to use if attribute is set (default \"\")\n     */\n    fun attr(name: String, value: Flow<Boolean>, trueValue: String = \"\") {\n        mountSimple(job, value) { v -> attr(name, v, trueValue) }\n    }\n\n    /**\n     * Sets an attribute when [value] is true otherwise removes it.\n     *\n     * @param name to use\n     * @param value for decision\n     * @param trueValue value to use if attribute is set (default \"\")\n     */\n    fun attr(name: String, value: Flow<Boolean?>, trueValue: String = \"\") {\n        mountSimple(job, value) { v -> attr(name, v, trueValue) }\n    }\n\n    /**\n     * adds a [String] of class names to the classes attribute of this [Tag]\n     */\n    fun addToClasses(classesToAdd: String)\n\n    /**\n     * adds a [Flow] of class names to the classes attribute of this [Tag]\n     */\n    fun addToClasses(classesToAdd: Flow<String>)\n\n    /**\n     * Sets the *class* attribute.\n     *\n     * @param value as [String]\n     */\n    fun className(value: String) {\n        addToClasses(value)\n    }\n\n    /**\n     * Sets the *class* attribute.\n     *\n     * @param value [Flow] with [String]\n     */\n    fun className(value: Flow<String>) {\n        addToClasses(value)\n    }\n\n    /**\n     * Sets the *class* attribute from a [List] of [String]s.\n     *\n     * @param values as [List] of [String]s\n     */\n    fun classList(values: List<String>) {\n        addToClasses(values.joinToString(\" \"))\n    }\n\n    /**\n     * Sets the *class* attribute from a [List] of [String]s.\n     *\n     * @param values [Flow] with [List] of [String]s\n     */\n    fun classList(values: Flow<List<String>>) {\n        addToClasses(values.map { it.joinToString(\" \") })\n    }\n\n    /**\n     * Sets the *class* attribute from a [Map] of [String] to [Boolean].\n     * If the value of the [Map]-entry is true, the key will be used inside the resulting [String].\n     *\n     * @param values as [Map] with key to set and corresponding values to decide\n     */\n    fun classMap(values: Map<String, Boolean>) {\n        addToClasses(values.filter { it.value }.keys.joinToString(\" \"))\n    }\n\n    /**\n     * Sets the *class* attribute from a [Map] of [String] to [Boolean].\n     * If the value of the [Map]-entry is true, the key will be used inside the resulting [String].\n     *\n     * @param values [Flow] of [Map] with key to set and corresponding values to decide\n     */\n    fun classMap(values: Flow<Map<String, Boolean>>) {\n        addToClasses(values.map { map -> map.filter { it.value }.keys.joinToString(\" \") })\n    }\n\n    /**\n     * Sets the *style* attribute.\n     *\n     * @param value [String] to set\n     */\n    fun inlineStyle(value: String) {\n        attr(\"style\", value)\n    }\n\n    /**\n     * Sets the *style* attribute.\n     *\n     * @param value [Flow] with [String]\n     */\n    fun inlineStyle(value: Flow<String>) {\n        attr(\"style\", value)\n    }\n\n    /**\n     * Sets all scope-entries as data-attributes to the element.\n     */\n    fun Scope.asDataAttr() {\n        for ((k, v) in this) {\n            attr(\"data-${k.name}\", v.toString())\n        }\n    }\n\n    /**\n     * Creates an [Listener] for the given event [eventName].\n     *\n     * @param eventName of the [Event] to listen for\n     */\n    override fun <X : Event> subscribe(eventName: String, capture: Boolean, init: Event.() -> Unit): Listener<X, E> =\n        Listener(domNode.subscribe(eventName, capture, init))\n\n    /**\n     * Adds text-content of a [Flow] at this position\n     *\n     * @param into target to render text-content to\n     * @receiver text-content\n     */\n    fun Flow<String>.renderText(into: Tag<*>? = null) {\n        val target = into?.apply(SET_MOUNT_POINT_DATA_ATTRIBUTE) ?: span(content = SET_MOUNT_POINT_DATA_ATTRIBUTE)\n\n        mountSimple(job, this) { content ->\n            target.domNode.clear()\n            target.domNode.appendChild(window.document.createTextNode(content))\n        }\n    }\n\n    /**\n     * Adds text-content of a [Flow] at this position\n     *\n     * @param into target to render text-content to\n     * @receiver text-content\n     */\n    fun <T> Flow<T>.renderText(into: Tag<*>? = null) = this.asString().renderText(into)\n\n    /**\n     * Adds static text-content at this position\n     *\n     * @receiver text-content\n     */\n    operator fun String.unaryPlus(): Node = domNode.appendChild(document.createTextNode(this))\n\n    /**\n     * Adds a comment in your HTML by using !\"Comment Text\".\n     *\n     * @receiver comment-content\n     */\n    operator fun String.not(): Node = domNode.appendChild(document.createComment(this))\n\n    /**\n     * Sets scope-entry for the given [key] as data-attribute to the element\n     * when available.\n     *\n     * @param key key of scope-entry to look for in scope\n     */\n    fun <T : Any> Scope.asDataAttr(key: Scope.Key<T>) {\n        this[key]?.let {\n            attr(\"data-${key.name}\", it.toString())\n        }\n    }\n\n    /**\n     * This extension method takes a boolean [Flow] that controls the forwarding of the initial value:\n     * If it is `true` the value will be passed further on the result flow, if it is `false` a `null` will appear instead.\n     *\n     * This is especially useful for DOM node attributes, that should only appear if a certain condition is true.\n     *\n     * Take the `aria-controls` attribute as example. This should only be set, if there is an area active / visible\n     * to control. Within a dynamic component - like some disclosure based one - the latter is only shown, if a state-flow\n     * is `true`:\n     * ```kotlin\n     * // `open`: Flow<Boolean>\n     * button.attr(\"aria-controls\", \"panelId\".whenever(open))\n     * //                                     ^^^^^^^^^^^^^^\n     * //                                     if open == true -> result flow provides \"panelId\" String\n     * //                                     if open == false -> result flow provides `null` -> whole attribute is removed\n     * ```\n     *\n     *  @param condition the boolean flow that decides whether to forward [T] or `null`\n     */\n    fun <T> T.whenever(condition: Flow<Boolean>): Flow<T?> = condition.map { if (it) this else null }\n\n    /**\n     * This extension method takes a boolean [Flow] that controls the forwarding of an initial flow:\n     * If it is `true` the current value will be passed further on the result flow, if it is `false` a `null` will appear\n     * instead.\n     *\n     * @see whenever\n     */\n    fun <T> Flow<T>.whenever(condition: Flow<Boolean>): Flow<T?> =\n        condition.flatMapLatest { cond -> this.map { value -> if (cond) value else null } }\n\n    /**\n     * provides [RenderContext] next to this [Tag] on the same DOM-level.\n     */\n    val annex: RenderContext\n}\n\n/**\n * Implementation of [Tag] to represent HTML5-tags.\n *\n * @param tagName name of the tag. Used to create the corresponding [Element]\n * @property id the DOM-id of the element to be created\n * @property baseClass a static base value for the class-attribute. All dynamic values for this attribute will be concatenated to this base-value.\n * @property job used for launching coroutines in\n * @property scope set some arbitrary scope entries into the [Tag]'s scope\n */\n@HtmlTagMarker\nopen class HtmlTag<out E : Element>(\n    private val tagName: String,\n    final override val id: String? = null,\n    final override val baseClass: String? = null,\n    override val job: Job,\n    override val scope: Scope,\n) : Tag<E> {\n\n    override val domNode: E = window.document.createElement(tagName).also { element ->\n        if (id != null) element.id = id\n        if (!baseClass.isNullOrBlank()) element.className = baseClass\n    }.unsafeCast<E>()\n\n    /**\n     * Creates the content of the [HtmlTag] and appends it as a child to the wrapped [Element].\n     *\n     * @param element the parent element of the new content\n     * @param content lambda building the content (following the type-safe-builder pattern)\n     */\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    final override inline fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W {\n        content(element)\n        domNode.appendChild(element.domNode)\n        return element\n    }\n\n    private var className: String? = baseClass\n    private var classFlow: Flow<String>? = null\n\n    private fun updateClasses() {\n        if (classFlow == null) {\n            attr(\"class\", className)\n        } else if (className == null) {\n            attr(\"class\", classFlow!!)\n        } else {\n            attr(\"class\", classFlow!!.map { classes(className, it) })\n        }\n    }\n\n    override fun addToClasses(classesToAdd: String) {\n        className = classes(className, classesToAdd)\n        updateClasses()\n    }\n\n    override fun addToClasses(classesToAdd: Flow<String>) {\n        classFlow = if (classFlow == null) classesToAdd else classFlow!!.combine(classesToAdd) { a, b -> classes(a, b) }\n        updateClasses()\n    }\n\n    internal inner class AnnexContext : RenderContext {\n        override fun <E : Node, T : WithDomNode<E>> register(element: T, content: (T) -> Unit): T {\n            domNode.parentElement?.let {\n                content(element)\n                it.appendChild(element.domNode)\n            }\n            return element\n        }\n\n        override val job: Job = this@HtmlTag.job\n\n        override val scope: Scope = this@HtmlTag.scope\n    }\n\n    /**\n     * provides [RenderContext] next to this [HtmlTag] on the same DOM-level.\n     */\n    override val annex: RenderContext by lazy { AnnexContext() }\n}\n\nconst val SVG_XMLNS = \"http://www.w3.org/2000/svg\"\n\n/**\n * Implementation of [HtmlTag] to represent the JavaScript\n * [SVGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGElement) to Kotlin\n */\nclass SvgTag(tagName: String, id: String? = null, baseClass: String? = null, job: Job, scope: Scope) :\n    HtmlTag<SVGElement>(tagName, id, baseClass, job, scope) {\n\n    override val domNode =\n        document.createElementNS(SVG_XMLNS, tagName).unsafeCast<SVGElement>().apply {\n            if (!baseClass.isNullOrBlank()) setAttributeNS(null, \"class\", baseClass)\n            if (!id.isNullOrBlank()) setAttributeNS(null, \"id\", id)\n        }\n\n    /**\n     * Sets the given [xml] string to the *innerHTML* of the [SVGElement].\n     *\n     * @param xml svg xml content\n     */\n    fun content(xml: String) {\n        domNode.innerHTML = xml\n    }\n\n    /**\n     * sets XML-namespace of a [Tag]\n     *\n     * @param value namespace to set\n     */\n    fun xmlns(value: String) = attr(\"xmlns\", value)\n}","@file:Suppress(\"unused\")\npackage dev.fritz2.core\n\nimport kotlinx.coroutines.channels.awaitClose\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.callbackFlow\nimport kotlinx.coroutines.flow.filter\nimport kotlinx.coroutines.flow.map\nimport org.w3c.dom.*\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.events.EventTarget\nimport org.w3c.files.FileList\n\n/**\n * Creates a [Listener] for the given [Event] type and [name].\n */\nfun <X : Event, T : EventTarget> T.subscribe(\n    name: String,\n    capture: Boolean = false,\n    init: Event.() -> Unit = {}\n): Listener<X, T> =\n    Listener(callbackFlow {\n        val listener: (Event) -> Unit = {\n            try {\n                it.init()\n                trySend(it.unsafeCast<X>())\n            } catch (e: Exception) {\n                console.error(\"Unexpected event type while listening for `$name` event\", e)\n            }\n        }\n        this@subscribe.addEventListener(name, listener, capture)\n\n        awaitClose { this@subscribe.removeEventListener(name, listener, capture) }\n    }.filter { it.asDynamic().fritz2StopPropagation == undefined })\n\n/**\n * Encapsulates the [Flow] of the [Event].\n */\nclass Listener<X: Event, out T: EventTarget>(private val events: Flow<X>): Flow<X> by events {\n\n    constructor(listener: Listener<X, T>) : this(listener.events)\n\n    /**\n     * Calls [Event.preventDefault] on the [Event]-flow.\n     */\n    fun preventDefault(): Listener<X, T> = Listener(this.events.map { it.preventDefault(); it })\n\n    /**\n     * Calls [Event.stopImmediatePropagation] on the [Event]-flow.\n     */\n    fun stopImmediatePropagation(): Listener<X, T> = Listener(this.events.map {\n        it.stopImmediatePropagation()\n        it.asDynamic().fritz2StopPropagation = true\n        it\n    })\n\n    /**\n     * Calls [Event.stopPropagation] on the [Event]-flow.\n     */\n    fun stopPropagation(): Listener<X, T> = Listener(this.events.map {\n        it.stopPropagation()\n        it.asDynamic().fritz2StopPropagation = true\n        it\n    })\n\n    /**\n     * Calls [Event.composedPath] on the [Event]-flow.\n     */\n    fun composedPath(): Flow<Array<EventTarget>> = this.events.map { it.composedPath() }\n\n}\n\n/**\n * Calls [Event.preventDefault] on the [Event]-flow.\n */\nfun <E: Event> Flow<E>.preventDefault(): Flow<E> = this.map { it.preventDefault(); it }\n/**\n * Calls [Event.stopImmediatePropagation] on the [Event]-flow.\n */\nfun <E: Event> Flow<E>.stopImmediatePropagation(): Flow<E> = this.map {\n    it.stopImmediatePropagation()\n    it.asDynamic().fritz2StopPropagation = true\n    it\n}\n/**\n * Calls [Event.stopPropagation] on the [Event]-flow.\n */\nfun <E: Event> Flow<E>.stopPropagation(): Flow<E> = this.map {\n    it.stopPropagation()\n    it.asDynamic().fritz2StopPropagation = true\n    it\n}\n/**\n * Calls [Event.composedPath] on the [Event]-flow.\n */\nfun <E: Event> Flow<E>.composedPath(): Flow<Array<EventTarget>> = this.map { it.composedPath() }\n\n\n/**\n * Extracts the [HTMLInputElement.value] from the [Event.target].\n */\nfun Listener<*, HTMLInputElement>.values(): Flow<String> =\n    this.map { it.target.unsafeCast<HTMLInputElement>().value }\n\n/**\n * Extracts the [HTMLInputElement.value] from the [Event.target].\n */\nfun Listener<*, HTMLSelectElement>.values(): Flow<String> =\n    this.map { it.target.unsafeCast<HTMLSelectElement>().value }\n\n/**\n * Extracts the [HTMLInputElement.value] from the [Event.target].\n */\nfun Listener<*, HTMLFieldSetElement>.values(): Flow<String> =\n    this.map { it.target.unsafeCast<HTMLInputElement>().value }\n\n/**\n * Extracts the [HTMLInputElement.value] from the [Event.target].\n */\nfun Listener<*, HTMLTextAreaElement>.values(): Flow<String> =\n    this.map { it.target.unsafeCast<HTMLTextAreaElement>().value }\n\n/**\n * Extracts a [FileList] from the [Event.target].\n */\nfun Listener<*, HTMLInputElement>.files(): Flow<FileList?> =\n    this.map { it.target.unsafeCast<HTMLInputElement>().files }\n\n/**\n * Extracts the [HTMLInputElement.checked] state from the [Event.target].\n */\nfun Listener<*, HTMLInputElement>.states(): Flow<Boolean> =\n    this.map { it.target.unsafeCast<HTMLInputElement>().checked }\n\n/**\n * Extracts the [HTMLSelectElement.selectedIndex] from the [Event.target].\n */\nfun Listener<*, HTMLSelectElement>.selectedIndex(): Flow<Int> =\n    this.map { it.target.unsafeCast<HTMLSelectElement>().selectedIndex }\n\n/**\n * Extracts the [HTMLOptionElement.value] from the selected [HTMLOptionElement].\n */\nfun Listener<*, HTMLSelectElement>.selectedValue(): Flow<String> =\n    this.map {\n        val select = it.target.unsafeCast<HTMLSelectElement>()\n        select.options[select.selectedIndex].unsafeCast<HTMLOptionElement>().value\n    }\n\n/**\n * Extracts the [HTMLOptionElement.text] from the selected [HTMLOptionElement].\n */\nfun Listener<*, HTMLSelectElement>.selectedText(): Flow<String> =\n    this.map {\n        val select = it.target.unsafeCast<HTMLSelectElement>()\n        select.options[select.selectedIndex].unsafeCast<HTMLOptionElement>().text\n    }",null,null,"package dev.fritz2.core\n\nimport kotlinx.coroutines.*\nimport kotlinx.coroutines.channels.Channel\nimport kotlinx.coroutines.channels.consumeEach\nimport kotlinx.coroutines.flow.*\n\n/**\n * Defines a type for transforming one value into the next\n */\ntypealias Update<D> = suspend (D) -> D\n\n/**\n * [Store] interface is the main type for all two-way data binding activities.\n */\ninterface Store<D> : WithJob {\n\n    /**\n     * Factory method to create a [SimpleHandler] mapping the actual value of the [Store] and a given Action to a new value.\n     *\n     * @param execute lambda that is executed whenever a new action-value appears on the connected event-[Flow].\n     */\n    fun <A> handle(\n        execute: suspend (D, A) -> D\n    ) = SimpleHandler<A> { flow, job ->\n        flow.onEach { enqueue { d -> execute(d, it) } }\n            .catch { d -> errorHandler(d) }\n            .launchIn(MainScope() + job)\n    }\n\n    /**\n     * Factory method to create a [SimpleHandler] that does not take an Action\n     *\n     * @param execute lambda that is executed for each event on the connected [Flow]\n     */\n    fun handle(\n        execute: suspend (D) -> D\n    ) = SimpleHandler<Unit> { flow, job ->\n        flow.onEach { enqueue { d -> execute(d) } }\n            .catch { d -> errorHandler(d) }\n            .launchIn(MainScope() + job)\n    }\n\n    /**\n     * Factory method to create a [EmittingHandler] taking an action-value and the current store value to derive the new value.\n     * An [EmittingHandler] is a [Flow] by itself and can therefore be connected to other [SimpleHandler]s even in other [Store]s.\n     *\n     * @param execute lambda that is executed for each action-value on the connected [Flow]. You can emit values from this lambda.\n     */\n    fun <A, E> handleAndEmit(\n        execute: suspend FlowCollector<E>.(D, A) -> D\n    ) = EmittingHandler<A, E>({ inFlow, outFlow, job ->\n            inFlow.onEach { enqueue { d -> outFlow.execute(d, it) } }\n                .catch { d -> errorHandler(d) }\n                .launchIn(MainScope() + job)\n        })\n\n    /**\n     * factory method to create an [EmittingHandler] that does not take an action in it's [execute]-lambda.\n     *\n     * @param execute lambda that is executed for each event on the connected [Flow]. You can emit values from this lambda.\n     */\n    fun <E> handleAndEmit(\n        execute: suspend FlowCollector<E>.(D) -> D\n    ) =\n        EmittingHandler<Unit, E>({ inFlow, outFlow, job ->\n            inFlow.onEach { enqueue { d -> outFlow.execute(d) } }\n                .catch { d -> errorHandler(d) }\n                .launchIn(MainScope() + job)\n        })\n\n    /**\n     * abstract method defining, how this [Store] handles an [Update]\n     *\n     * @param update the [Update] to handle\n     */\n    suspend fun enqueue(update: Update<D>)\n\n    /**\n     * [id] of this [Store].\n     * ids of depending [Store]s are concatenated and separated by a dot.\n     */\n    val id: String\n\n    /**\n     * Path of this [Store] derived from the underlying model.\n     * Paths of depending [Store]s are concatenated and separated by a dot.\n     */\n    val path: String\n\n    /**\n     * the [Flow] representing the current value of the [Store]. Use this to bind it to ui-elements or derive calculated values by using [map] for example.\n     */\n    val data: Flow<D>\n\n    /**\n     * represents the current value of the [Store]\n     */\n    val current: D\n\n    /**\n     * a simple [SimpleHandler] that just takes the given action-value as the new value for the [Store].\n     */\n    val update: Handler<D>\n\n    /**\n     * Creates a new [Store] that contains data derived by a given [Lens].\n     *\n     * @param lens: a [Lens] describing the two-way data binding of the derived [Store].\n     */\n    fun <X> map(lens: Lens<D, X>): Store<X> = SubStore(this, lens)\n}\n\n/**\n * A [Store] can be initialized with a given value.\n *\n * @param initialData first current value of this [Store]\n * @param id id of this [Store]. Ids of derived [Store]s will be concatenated.\n */\nopen class RootStore<D>(\n    initialData: D,\n    override val id: String = Id.next()\n) : Store<D> {\n    override val path: String = \"\"\n\n    private val state: MutableStateFlow<D> = MutableStateFlow(initialData)\n    private val queue = Channel<Update<D>>(Channel.UNLIMITED)\n\n    /**\n     * [Job] used as parent job on all coroutines started in [Handler]s in the scope of this [Store]\n     */\n    override val job: Job = MainScope().launch(start = CoroutineStart.UNDISPATCHED) {\n        queue.consumeEach { update ->\n            try {\n                state.value = update(state.value)\n            } catch (t: Throwable) {\n                errorHandler(t)\n            }\n        }\n    }\n\n    /**\n     * Emits a [Flow] with the current data of this [Store].\n     * The [Flow] internal data is only changed, when the value differs from the last one to avoid calculations\n     * and updates that are not necessary.\n     *\n     * Actual data therefore is derived by applying the updates on the internal channel one by one to get the next value.\n     */\n    final override val data: Flow<D> = state.asStateFlow()\n\n    /**\n     * Represents the current data of this [Store].\n     */\n    override val current: D\n        get() = state.value\n\n    /**\n     * in a [RootStore] an [Update] is handled by applying it to the internal [StateFlow].\n     */\n    override suspend fun enqueue(update: Update<D>): Unit = queue.send(update)\n\n    /**\n     * a simple [SimpleHandler] that just takes the given action-value as the new value for the [Store].\n     */\n    override val update = this.handle<D> { _, newValue -> newValue }\n}\n\n/**\n * Convenience function to create a simple [Store] without any handlers, etc.\n *\n * @param initialData first current value of this [Store]\n * @param id id of this store. Ids of derived [Store]s will be concatenated.\n */\nfun <D> storeOf(initialData: D, id: String = Id.next()): Store<D> = RootStore(initialData, id)\n",null,null,"package dev.fritz2.core\n\nimport kotlinx.browser.document\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.launch\nimport kotlinx.dom.clear\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.HTMLStyleElement\nimport org.w3c.dom.Node\nimport org.w3c.dom.css.CSSStyleSheet\n\n/**\n * Occurs when the targeted html element is not present in document.\n *\n * @param message exception message\n */\nclass MountTargetNotFoundException(message: String) : Exception(message)\n\n/**\n * Creates a [RenderContext] for [Tag]s and\n * mounts it to a constant element in the static html file\n * which id matches the [selector].\n *\n * @param selector [query selector](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector)\n * of the element to mount to\n * @param override if true all child elements are removed before rendering\n * @param content [RenderContext] for rendering the data to the DOM\n * @throws MountTargetNotFoundException if target element with [selector] not found\n */\nfun render(\n    selector: String,\n    override: Boolean = true,\n    content: RenderContext.() -> Unit\n) {\n    document.querySelector(selector)?.let { parentElement ->\n        if (parentElement is HTMLElement) {\n            render(parentElement, override, content)\n        } else MountTargetNotFoundException(\"element with id=$selector is not an HTMLElement\")\n    } ?: throw MountTargetNotFoundException(\"html document contains no element with id=$selector\")\n}\n\n/**\n * Creates a [RenderContext] for [Tag]s and mounts it to a [targetElement].\n *\n * @param targetElement [HTMLElement] to mount to, default is *document.body*\n * @param override if true all child elements are removed before rendering\n * @param content [RenderContext] for rendering the data to the DOM\n * @throws MountTargetNotFoundException if [targetElement] not found\n */\nfun render(\n    targetElement: HTMLElement? = document.body,\n    override: Boolean = true,\n    content: RenderContext.() -> Unit\n) {\n    //add style sheet containing mount-point-class\n    addGlobalStyle(\".$MOUNT_POINT_STYLE_CLASS { display: contents; }\")\n\n    if (targetElement != null) {\n        if (override) targetElement.clear()\n\n        val mountPoint = object : RenderContext, MountPointImpl() {\n            override val job = Job()\n            override val scope: Scope = Scope().also { scope -> scope[MOUNT_POINT_KEY] = this }\n\n            override fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W {\n                content(element)\n                targetElement.appendChild(element.domNode)\n                return element\n            }\n\n        }\n\n        MainScope().launch {\n            content(mountPoint)\n            mountPoint.runAfterMounts()\n        }\n\n    } else throw MountTargetNotFoundException(\"targetElement should not be null\")\n}\n\nconst val FRITZ2_GLOBAL_STYLESHEET_ID = \"fritz2-global-styles\"\n\ninternal fun getOrCreateGlobalStylesheet() = (document.getElementById(FRITZ2_GLOBAL_STYLESHEET_ID)?.let {\n    (it as HTMLStyleElement).sheet\n} ?: (document.createElement(\"style\") as HTMLStyleElement).also {\n    it.setAttribute(\"id\", FRITZ2_GLOBAL_STYLESHEET_ID)\n    it.appendChild(document.createTextNode(\"\"))\n    document.head!!.appendChild(it)\n}.sheet!!) as CSSStyleSheet\n\n/**\n * Adds global css-rules to a fritz2-specific stylesheet added to the document when first called\n *\n * @param css the valid css-code to insert\n */\nfun addGlobalStyle(css: String) {\n    getOrCreateGlobalStylesheet().insertRule(css, 0)\n}\n\n/**\n * Adds global css-rules to a fritz2-specific stylesheet added to the document when first called\n *\n * @param css the valid rules to insert\n */\nfun addGlobalStyles(css: List<String>) {\n    val stylesheet = getOrCreateGlobalStylesheet()\n    css.forEach { stylesheet.insertRule(it, 0) }\n}\n\n/**\n * Joins all given [classes] strings to one html-class-attribute [String]\n * by filtering all out which are null or blank.\n */\nfun classes(vararg classes: String?): String =\n    classes.filter { !it.isNullOrBlank() }.joinToString(\" \")\n\n/**\n * Helper function to call a native js function with concrete return type [T]\n */\n@JsName(\"Function\")\ninternal external fun <T> nativeFunction(vararg params: String, block: String): T","package dev.fritz2.core\n\nimport dev.fritz2.core.Scope.Key\n\n/**\n * Marks a class that it has [Scope] which can be transferred for adding/receiving additional information.\n *\n * The concept of the [Scope] is to provide a consistent mechanism to pass arbitrary data down the DOM tree from\n * a hierarchical higher node to \"unknown\" consumer nodes down the tree. This is very important for all kind of\n * dev.fritz2.headless.components (not necessarily fritz2's dev.fritz2.headless.components!), that should adapt to its context. Some higher node places some\n * information tagged by a unique key into the scope and passes this further down to its children, which themselves\n * just passes this scope further down, optionally adding or manipulating the scope for their children on their own.\n * Somewhere down the tree a node can evaluate the scope passed to him and look out for some key it want to react to.\n * If the key is present it can then apply its value or just behave in some specific way different to its default.\n * If there is no key, the node just applies its default behaviour.\n *\n * To give a practical example:\n * Imagine some button component, which normally uses the \"primary\" color as background. This works fine for most of\n * the time. But now imagine a buttons-bar on the bottom edge of a modal for example to provide the typical buttons\n * like \"ok\", \"cancel\", \"yes\", \"no\" or alike. This bar uses the primary color as background too, to have a high contrast\n * against the content above. The two dev.fritz2.headless.components do not work well together this way!\n * The user would have to manually apply some other color to the buttons when using them inside the bar, in order to\n * preserve a good contrast to it. To achieve this behaviour automatically, the scope comes to the rescue:\n * The buttons-bar component can define a global scope-key `buttonsBar` by using the [Scope.keyOf] function.\n * Then it can add some key-value pair to the scope like `set(buttonsBar, true)` in order\n * to signal all child nodes that they appear within the context of a buttons bar. The button component could be\n * aware of the key and implement some different behaviour concerning the color, if it detects that it is used within\n * a buttons-bar.\n *\n * The scope only changes conformal to the node hierarchy. That is the scope is empty at the top level [render] function\n * call and may be filled or changed by each child. But a change by some node is only propagated to the children of\n * that node. The children of the next siblings of the changing node are not affected and do not see those scope values!\n *\n * Example:\n * ```\n * div { // initial scope -> empty!\n *     val sizes = keyOf<String>(\"sizes\") // normally define scope-keys globally\n *     div(scope = {\n *         set(sizes, \"small\") // add some key-value to the scope\n *     }) {\n *         // all children will get this scope instance\n *         p {\n *             scope.asDataAttr() // -> { \"sizes\": \"small\" }\n *         }\n *         section {\n *             when (scope[sizes]) {\n *                 \"small\" -> div({ fontSize { \"0.8rem\" } }) { +\"small text\" }\n *                 \"normal\" -> div({ fontSize { \"1rem\" } }) { +\"normal text\" }\n *                 \"large\" -> div({ fontSize { \"1.2rem\" } }) { +\"large text\" }\n *                 else -> div { +\"no size scope available\" }\n *             }\n *         }\n *         // end of children\n *     }\n *     // next sibling -> only parent scope available, which is empty!\n *     p {\n *         scope.asDataAttr() // -> {}\n *     }\n * }\n * ```\n *\n * It is intentional that the key is not tied to some component or restricted in any other way.\n * A client should strive for a key management, that is driven by the \"producing\" node, not the \"consuming\" one!\n * That means one should prefer to encode that some specific context now exist or that some value is now available,\n * instead of setting a client node tailored rule. This enables more freedom for future usages and adaptions by other\n * consuming dev.fritz2.headless.components.\n *\n * To continue the first example: A buttons-bar component should better not inject some \"buttonsColor\" into the scope,\n * but better just some \"buttonsBar\" key without any value (Unit). As a creator you just cannot anticipate all situations\n * and future usage of the buttons-bar component. It might be possible that a client wants to put something different to a\n * button into the bar, that also should react to the context. Then a key (and value) tailored to the button does not\n * make sense anymore.\n *\n * @see Scope\n * @see [dev.fritz2.browser.Tag]\n */\ninterface WithScope {\n    val scope: Scope\n}\n\n/**\n * Contains any type of data which consists of a [Key] and a corresponding value object.\n */\nvalue class Scope(private val entries: HashMap<Key<*>, Any> = hashMapOf()) {\n\n    companion object {\n        /**\n         * Creates a [Scope.Key] for using it in [Scope].\n         */\n        inline fun <reified T: Any> keyOf(name: String? = null): Key<T> =\n            Key(name ?: T::class.simpleName ?: \"unknown\")\n    }\n\n    /**\n     * Creates a new [Scope] instance from a given one.\n     */\n    constructor(parent: Scope) : this(HashMap(parent.entries))\n\n    /**\n     * Key for setting and receiving entries in the [Scope]\n     */\n    open class Key<T: Any>(val name: String) {\n        override fun toString(): String = name\n    }\n\n    /**\n     * Sets a new key-value-pair to the [Scope].\n     */\n    internal operator fun <T: Any> set(key: Key<T>, value: T) { entries[key] = value }\n\n    /**\n     * Receives a key-value-par from the [Scope].\n     */\n    operator fun <T: Any> get(key: Key<T>): T? = entries[key]?.unsafeCast<T>()\n\n    /**\n     * Returns all containing [Key]s from the [Scope].\n     */\n    val keys: Set<Key<*>> get() = entries.keys\n\n    /**\n     * Gives the number of stored key-value-pairs.\n     */\n    val size: Int get() = entries.size\n\n    /**\n     * Checks if the [Scope] contains the given key.\n     */\n    fun <T: Any> contains(key: Key<T>) = entries.contains(key)\n\n    /**\n     * Removes the specified key and its corresponding value from the [Scope].\n     *\n     * @return the previous value associated with the key, or null if the key was not present in the [Scope].\n     */\n    fun <T: Any> remove(key: Key<T>) = entries.remove(key)\n\n    /**\n     * Formats the [Scope] to a valid JSON string for printing or using it inside Javascript.\n     *\n     * Be aware that this is just a key-value formatting, where each payload data is just encoded as [String].\n     * So there is no magical serialization for primitives or complex types embedded!\n     *\n     * Examples:\n     * ```\n     * // primitive types:\n     * {\n     *   \"boolean\": \"true\"\n     *   \"integer\": \"42\"\n     * }\n     *\n     * // complex type\n     * data class User(val name: String, val active: Boolean)\n     * val key: keyOf<User>(\"user\")\n     * val user = User(\"Chris\", true)\n     * // as JSON\n     * {\n     *   \"user\" : \"User(name=Chris, active=true)\"\n     * }\n     *\n     * ```\n     */\n    override fun toString(): String = buildString {\n        append(\"{ \")\n        var count = 0\n        for ((k, v) in entries) {\n            if (++count > 1) append(\", \")\n            append(\"\\\"\")\n            append(k.name)\n            append(\"\\\" : \\\"\")\n            append(v)\n            append(\"\\\"\")\n        }\n        append(\" }\")\n    }\n\n    /**\n     * Returns an Iterator over the entries in the [Scope].\n     */\n    operator fun iterator() = entries.toMap().iterator()\n}\n\n/**\n * Context for setting new entries to a [Scope] object.\n */\n@HtmlTagMarker\nclass ScopeContext(private var current: Scope) {\n    val scope get() = current\n\n    /**\n     * Sets a new key-value-pair to the [Scope].\n     */\n    fun <T: Any> set(key: Key<T>, value: T) {\n        current = Scope(current)\n        current[key] = value\n    }\n}",null,"package dev.fritz2.core\n\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.FlowCollector\nimport kotlinx.coroutines.flow.MutableSharedFlow\n\n/**\n * This [Flow] implementation represents a flow that emits exactly one value during its lifetime.\n *\n * @param value the value to emit on the flow\n */\nclass OnlyOnceFlow<T>(private val value: T) : Flow<T> {\n    private var collected = false\n\n    override suspend fun collect(collector: FlowCollector<T>) {\n        if (!collected) {\n            collected = true\n            collector.emit(value)\n        }\n    }\n}\n\n/**\n * This factory function creates an [OnlyOnceFlow].\n *\n * @param value the value to emit on the flow\n */\nfun <T> flowOnceOf(value: T) = OnlyOnceFlow(value)\n\n/**\n * Base-interface of the different types of handlers\n *\n * @property process function describing how this handler collects a [Flow] when called\n */\ninterface Handler<A> {\n    val process: (Flow<A>, Job) -> Unit\n}\n\n/**\n * Defines, how to handle actions in your [Store]. Each Handler accepts actions of a defined type.\n * If your handler just needs the current value of the [Store] and no action, use [Unit].\n *\n * @param process defines how to handle the values of the connected [Flow]\n */\nvalue class SimpleHandler<A>(override inline val process: (Flow<A>, Job) -> Unit) : Handler<A>\n\n/**\n * An [EmittingHandler] is a special [Handler] that constitutes a new [Flow] by itself. You can emit values to this [Flow] from your code\n * and connect it to other [Handler]s on this or on other [Store]s. This way inter-store-communication is done in fritz2.\n *\n * @param collectWithChannel defines how to handle the values of the connected [Flow]\n * @property process function defining how this [Handler] collects a [Flow] when connected using [handledBy]\n */\nclass EmittingHandler<A, E>(\n    inline val collectWithChannel: (Flow<A>, FlowCollector<E>, Job) -> Unit,\n    private val flow: MutableSharedFlow<E> = MutableSharedFlow()\n) : Handler<A>, Flow<E> by flow {\n\n    override val process: (Flow<A>, Job) -> Unit = { upstream, job ->\n        collectWithChannel(upstream, flow, job)\n    }\n}\n",null,null,"package dev.fritz2.routing\n\nimport dev.fritz2.core.Store\nimport dev.fritz2.core.Update\nimport dev.fritz2.core.lensForElement\nimport kotlinx.browser.window\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.sync.withLock\nimport org.w3c.dom.events.Event\n\n/**\n * Creates a new simple [String] based [Router]\n *\n * @param default default route\n */\nfun routerOf(default: String = \"\"): Router<String> = Router(StringRoute(default))\n\n/**\n * Creates a new [Map] based [Router]\n *\n * @param default default route\n */\nfun routerOf(default: Map<String, String> = emptyMap()) = MapRouter(default)\n\n/**\n * Creates a new type based [Router].\n * Therefore, the given type must implement the [Route] interface.\n *\n * @param default default route\n */\nfun <T> routerOf(default: Route<T>): Router<T> = Router(default)\n\n/**\n * Router register the event-listener for hashchange-event and\n * handles route-changes. Therefore, it uses a [Route] object\n * which can [Route.serialize] and [Route.deserialize] the given type.\n *\n * @param T type to marshal and unmarshal\n * @property defaultRoute default route to use when page is called and no hash is set\n */\nopen class Router<T>(\n    private val defaultRoute: Route<T>,\n) : Store<T> {\n\n    override val id: String = \"\"\n\n    override val path: String = \"\"\n\n    override val job: Job = Job()\n\n    private val state: MutableStateFlow<T> = MutableStateFlow(defaultRoute.default)\n\n    private val prefix = \"#\"\n\n    private val mutex = Mutex()\n\n    override val data: Flow<T> = state.asStateFlow()\n\n    override val current: T\n        get() = state.value\n\n    override val update = this.handle<T> { _, newValue -> newValue }\n\n    /**\n     * Navigates to the new given route provided as [T].\n     */\n    open val navTo = this.handle<T> { _, newValue -> newValue }\n\n    override suspend fun enqueue(update: Update<T>) {\n        mutex.withLock {\n            val newRoute = update(state.value)\n            state.value = newRoute\n            window.location.hash = prefix + defaultRoute.serialize(newRoute)\n        }\n    }\n\n    init {\n        if (window.location.hash.removePrefix(prefix).isNotBlank()) {\n            state.value = defaultRoute.deserialize(window.location.hash.removePrefix(prefix))\n        }\n        val listener: (Event) -> Unit = {\n            it.preventDefault()\n            if (window.location.hash.removePrefix(prefix).isNotBlank()) {\n                state.value = defaultRoute.deserialize(window.location.hash.removePrefix(prefix))\n            } else {\n                state.value = defaultRoute.default\n            }\n        }\n        window.addEventListener(\"hashchange\", listener)\n    }\n}\n\n/**\n * Represents the current [Route] as [Map] of [String]s.\n *\n * @param defaultRoute default [Route] to start with.\n */\nopen class MapRouter(defaultRoute: Map<String, String> = emptyMap()) :\n    Router<Map<String, String>>(MapRoute(defaultRoute)) {\n\n    /**\n     * Selects with the given [key] a [Pair] of the value\n     * and all routing parameters as [Map].\n     *\n     * @param key for getting the value from the parameter [Map]\n     * @return [Flow] of the resulting [Pair]\n     */\n    open fun select(key: String): Flow<Pair<String?, Map<String, String>>> = this.data.map { m -> m[key] to m }\n\n    /**\n     * Returns the value for the given [key] from the routing parameters.\n     *\n     * @param key for getting the value from the parameter [Map]\n     * @param orElse if [key] is not in [Map]\n     * @return [Flow] of [String] with the value\n     */\n    open fun select(key: String, orElse: String): Flow<String> = this.data.map { m -> m[key] ?: orElse }\n\n    /**\n     * Creates a new [Store] containing the corresponding value for the given [key].\n     *\n     * @param key for getting the value from the parameter [Map]\n     * @return [Store] containing the corresponding value\n     */\n    open fun mapByKey(key: String): Store<String> = this.map(lensForElement(key))\n}\n\n/**\n * A Route is an abstraction for routes\n * which needed for routing\n *\n * @param T type to de-/serialize from\n */\ninterface Route<T> {\n    /**\n     * Gives the default value when initialising the routing\n     */\n    val default: T\n\n    /**\n     * Deserializes the *window.location.hash* to the\n     * given type [T] after the hashchange-event is fired.\n     */\n    fun deserialize(hash: String): T\n\n    /**\n     * Serializes a given object of type [T] to [String]\n     * for setting it to the *window.location.hash*\n     */\n    fun serialize(route: T): String\n}\n\n/**\n * [StringRoute] is a simple [Route] which\n * serializes and deserializes nothing.\n *\n * @param default [String] to use when no explicit *window.location.hash* was set before\n */\nopen class StringRoute(override val default: String = \"\") : Route<String> {\n    override fun deserialize(hash: String): String = decodeURIComponent(hash)\n    override fun serialize(route: String): String = encodeURIComponent(route)\n}\n\n/**\n * [MapRoute] serializes and deserializes a [Map] to and from *window.location.hash*.\n * It is like using url parameters with pairs of key and value.\n * At the start of the route is only a **#** instead of **?**.\n *\n * @param default [Map] to use when no explicit *window.location.hash* was set before\n */\nopen class MapRoute(override val default: Map<String, String> = emptyMap()) :\n    Route<Map<String, String>> {\n\n    private val assignment = \"=\"\n    private val divider = \"&\"\n\n    override fun deserialize(hash: String): Map<String, String> =\n        hash.split(divider).filter { s -> s.isNotBlank() }.asReversed().associate(::extractPair)\n\n    override fun serialize(route: Map<String, String>): String =\n        route.map { (key, value) -> \"$key$assignment${encodeURIComponent(value)}\" }\n            .joinToString(separator = divider)\n\n    private fun extractPair(param: String): Pair<String, String> {\n        val equalsPos = param.indexOf(assignment)\n        return if (equalsPos > 0) {\n            val key = param.substring(0, equalsPos)\n            val value = decodeURIComponent(param.substring(equalsPos + 1))\n            key to value\n        } else param to \"true\"\n    }\n}\n\nexternal fun decodeURIComponent(encodedURI: String): String\n\nexternal fun encodeURIComponent(decodedURI: String): String",null,null,null,null,"@file:Suppress(\"unused\")\n\npackage dev.fritz2.core\n\nimport kotlinx.coroutines.flow.Flow\nimport org.w3c.dom.*\nimport org.w3c.fetch.RequestDestination\n\nfun SvgTag.viewBox(value: String) = attr(\"viewBox\", value)\nfun SvgTag.viewBox(value: Flow<String>) = attr(\"viewBox\", value)\n\nfun SvgTag.fill(value: String) = attr(\"fill\", value)\nfun SvgTag.fill(value: Flow<String>) = attr(\"fill\", value)\n\nfun SvgTag.d(value: String) = attr(\"d\", value)\nfun SvgTag.d(value: Flow<String>) = attr(\"d\", value)\n\n/*\n * Generated by https://github.com/chausknecht/HtmlTagAttributesExtractor\n * Pay attention to local modifications before pasting an updated output here!\n * Add manual extensions above this section (like the SVG attributes).\n */\n\n/*\n * HTMLElement attributes\n */\nfun Tag<HTMLElement>.title(value: String) = attr(\"title\", value)\nfun Tag<HTMLElement>.title(value: Flow<String>) = attr(\"title\", value)\n\nfun Tag<HTMLElement>.lang(value: String) = attr(\"lang\", value)\nfun Tag<HTMLElement>.lang(value: Flow<String>) = attr(\"lang\", value)\n\nfun Tag<HTMLElement>.translate(value: Boolean, trueValue: String = \"\") = attr(\"translate\", value, trueValue)\nfun Tag<HTMLElement>.translate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"translate\", value, trueValue)\n\nfun Tag<HTMLElement>.dir(value: String) = attr(\"dir\", value)\nfun Tag<HTMLElement>.dir(value: Flow<String>) = attr(\"dir\", value)\n\nfun Tag<HTMLElement>.hidden(value: Boolean, trueValue: String = \"\") = attr(\"hidden\", value, trueValue)\nfun Tag<HTMLElement>.hidden(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"hidden\", value, trueValue)\n\nfun Tag<HTMLElement>.tabIndex(value: Int) = attr(\"tabindex\", value)\nfun Tag<HTMLElement>.tabIndex(value: Flow<Int>) = attr(\"tabindex\", value)\n\nfun Tag<HTMLElement>.accessKey(value: String) = attr(\"accesskey\", value)\nfun Tag<HTMLElement>.accessKey(value: Flow<String>) = attr(\"accesskey\", value)\n\nfun Tag<HTMLElement>.draggable(value: Boolean, trueValue: String = \"\") = attr(\"draggable\", value, trueValue)\nfun Tag<HTMLElement>.draggable(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"draggable\", value, trueValue)\n\nfun Tag<HTMLElement>.contextMenu(value: HTMLMenuElement?) = attr(\"contextmenu\", value)\nfun Tag<HTMLElement>.contextMenu(value: Flow<HTMLMenuElement?>) = attr(\"contextmenu\", value)\n\nfun Tag<HTMLElement>.spellcheck(value: Boolean, trueValue: String = \"\") = attr(\"spellcheck\", value, trueValue)\nfun Tag<HTMLElement>.spellcheck(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"spellcheck\", value, trueValue)\n\nfun Tag<HTMLElement>.innerText(value: String) = attr(\"innertext\", value)\nfun Tag<HTMLElement>.innerText(value: Flow<String>) = attr(\"innertext\", value)\n\n// inherited attributes from supertype Element\nfun Tag<HTMLElement>.id(value: String) = attr(\"id\", value)\nfun Tag<HTMLElement>.id(value: Flow<String>) = attr(\"id\", value)\n\nfun Tag<HTMLElement>.slot(value: String) = attr(\"slot\", value)\nfun Tag<HTMLElement>.slot(value: Flow<String>) = attr(\"slot\", value)\n\nfun Tag<HTMLElement>.scrollTop(value: Double) = attr(\"scrolltop\", value)\nfun Tag<HTMLElement>.scrollTop(value: Flow<Double>) = attr(\"scrolltop\", value)\n\nfun Tag<HTMLElement>.scrollLeft(value: Double) = attr(\"scrollleft\", value)\nfun Tag<HTMLElement>.scrollLeft(value: Flow<Double>) = attr(\"scrollleft\", value)\n\nfun Tag<HTMLElement>.innerHTML(value: String) = attr(\"innerhtml\", value)\nfun Tag<HTMLElement>.innerHTML(value: Flow<String>) = attr(\"innerhtml\", value)\n\nfun Tag<HTMLElement>.outerHTML(value: String) = attr(\"outerhtml\", value)\nfun Tag<HTMLElement>.outerHTML(value: Flow<String>) = attr(\"outerhtml\", value)\n\n// inherited attributes from supertype Node\nfun Tag<HTMLElement>.nodeValue(value: String?) = attr(\"nodevalue\", value)\nfun Tag<HTMLElement>.nodeValue(value: Flow<String?>) = attr(\"nodevalue\", value)\n\nfun Tag<HTMLElement>.textContent(value: String?) = attr(\"textcontent\", value)\nfun Tag<HTMLElement>.textContent(value: Flow<String?>) = attr(\"textcontent\", value)\n\n// inherited attributes from supertype ElementContentEditable\nfun Tag<HTMLElement>.contentEditable(value: String) = attr(\"contenteditable\", value)\nfun Tag<HTMLElement>.contentEditable(value: Flow<String>) = attr(\"contenteditable\", value)\n\n\n/*\n * HTMLBaseElement attributes\n */\nfun Tag<HTMLBaseElement>.href(value: String) = attr(\"href\", value)\nfun Tag<HTMLBaseElement>.href(value: Flow<String>) = attr(\"href\", value)\n\nfun Tag<HTMLBaseElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLBaseElement>.target(value: Flow<String>) = attr(\"target\", value)\n\n\n/*\n * HTMLLinkElement attributes\n */\nfun Tag<HTMLLinkElement>.href(value: String) = attr(\"href\", value)\nfun Tag<HTMLLinkElement>.href(value: Flow<String>) = attr(\"href\", value)\n\nfun Tag<HTMLLinkElement>.crossOrigin(value: String?) = attr(\"crossorigin\", value)\nfun Tag<HTMLLinkElement>.crossOrigin(value: Flow<String?>) = attr(\"crossorigin\", value)\n\nfun Tag<HTMLLinkElement>.rel(value: String) = attr(\"rel\", value)\nfun Tag<HTMLLinkElement>.rel(value: Flow<String>) = attr(\"rel\", value)\n\nfun Tag<HTMLLinkElement>.`as`(value: RequestDestination) = attr(\"as\", value)\nfun Tag<HTMLLinkElement>.`as`(value: Flow<RequestDestination>) = attr(\"as\", value)\n\nfun Tag<HTMLLinkElement>.media(value: String) = attr(\"media\", value)\nfun Tag<HTMLLinkElement>.media(value: Flow<String>) = attr(\"media\", value)\n\nfun Tag<HTMLLinkElement>.nonce(value: String) = attr(\"nonce\", value)\nfun Tag<HTMLLinkElement>.nonce(value: Flow<String>) = attr(\"nonce\", value)\n\nfun Tag<HTMLLinkElement>.hreflang(value: String) = attr(\"hreflang\", value)\nfun Tag<HTMLLinkElement>.hreflang(value: Flow<String>) = attr(\"hreflang\", value)\n\nfun Tag<HTMLLinkElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLLinkElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLLinkElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLLinkElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLLinkElement>.charset(value: String) = attr(\"charset\", value)\nfun Tag<HTMLLinkElement>.charset(value: Flow<String>) = attr(\"charset\", value)\n\nfun Tag<HTMLLinkElement>.rev(value: String) = attr(\"rev\", value)\nfun Tag<HTMLLinkElement>.rev(value: Flow<String>) = attr(\"rev\", value)\n\nfun Tag<HTMLLinkElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLLinkElement>.target(value: Flow<String>) = attr(\"target\", value)\n\nfun Tag<HTMLLinkElement>.scope(value: String) = attr(\"scope\", value)\nfun Tag<HTMLLinkElement>.scope(value: Flow<String>) = attr(\"scope\", value)\n\nfun Tag<HTMLLinkElement>.workerType(value: WorkerType) = attr(\"workertype\", value)\nfun Tag<HTMLLinkElement>.workerType(value: Flow<WorkerType>) = attr(\"workertype\", value)\n\n\n/*\n * HTMLMetaElement attributes\n */\nfun Tag<HTMLMetaElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLMetaElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLMetaElement>.httpEquiv(value: String) = attr(\"httpequiv\", value)\nfun Tag<HTMLMetaElement>.httpEquiv(value: Flow<String>) = attr(\"httpequiv\", value)\n\nfun Tag<HTMLMetaElement>.content(value: String) = attr(\"content\", value)\nfun Tag<HTMLMetaElement>.content(value: Flow<String>) = attr(\"content\", value)\n\nfun Tag<HTMLMetaElement>.scheme(value: String) = attr(\"scheme\", value)\nfun Tag<HTMLMetaElement>.scheme(value: Flow<String>) = attr(\"scheme\", value)\n\n\n/*\n * HTMLStyleElement attributes\n */\nfun Tag<HTMLStyleElement>.media(value: String) = attr(\"media\", value)\nfun Tag<HTMLStyleElement>.media(value: Flow<String>) = attr(\"media\", value)\n\nfun Tag<HTMLStyleElement>.nonce(value: String) = attr(\"nonce\", value)\nfun Tag<HTMLStyleElement>.nonce(value: Flow<String>) = attr(\"nonce\", value)\n\nfun Tag<HTMLStyleElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLStyleElement>.type(value: Flow<String>) = attr(\"type\", value)\n\n\n/*\n * HTMLBodyElement attributes\n */\nfun Tag<HTMLBodyElement>.link(value: String) = attr(\"link\", value)\nfun Tag<HTMLBodyElement>.link(value: Flow<String>) = attr(\"link\", value)\n\nfun Tag<HTMLBodyElement>.vLink(value: String) = attr(\"vlink\", value)\nfun Tag<HTMLBodyElement>.vLink(value: Flow<String>) = attr(\"vlink\", value)\n\nfun Tag<HTMLBodyElement>.aLink(value: String) = attr(\"alink\", value)\nfun Tag<HTMLBodyElement>.aLink(value: Flow<String>) = attr(\"alink\", value)\n\nfun Tag<HTMLBodyElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLBodyElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\nfun Tag<HTMLBodyElement>.background(value: String) = attr(\"background\", value)\nfun Tag<HTMLBodyElement>.background(value: Flow<String>) = attr(\"background\", value)\n\n\n/*\n * HTMLHeadingElement attributes\n */\nfun Tag<HTMLHeadingElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLHeadingElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLParagraphElement attributes\n */\nfun Tag<HTMLParagraphElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLParagraphElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLHRElement attributes\n */\nfun Tag<HTMLHRElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLHRElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLHRElement>.color(value: String) = attr(\"color\", value)\nfun Tag<HTMLHRElement>.color(value: Flow<String>) = attr(\"color\", value)\n\nfun Tag<HTMLHRElement>.noShade(value: Boolean, trueValue: String = \"\") = attr(\"noshade\", value, trueValue)\nfun Tag<HTMLHRElement>.noShade(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"noshade\", value, trueValue)\n\nfun Tag<HTMLHRElement>.size(value: String) = attr(\"size\", value)\nfun Tag<HTMLHRElement>.size(value: Flow<String>) = attr(\"size\", value)\n\nfun Tag<HTMLHRElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLHRElement>.width(value: Flow<String>) = attr(\"width\", value)\n\n\n/*\n * HTMLPreElement attributes\n */\nfun Tag<HTMLPreElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLPreElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\n\n/*\n * HTMLQuoteElement attributes\n */\nfun Tag<HTMLQuoteElement>.cite(value: String) = attr(\"cite\", value)\nfun Tag<HTMLQuoteElement>.cite(value: Flow<String>) = attr(\"cite\", value)\n\n\n/*\n * HTMLOListElement attributes\n */\nfun Tag<HTMLOListElement>.reversed(value: Boolean, trueValue: String = \"\") = attr(\"reversed\", value, trueValue)\nfun Tag<HTMLOListElement>.reversed(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"reversed\", value, trueValue)\n\nfun Tag<HTMLOListElement>.start(value: Int) = attr(\"start\", value)\nfun Tag<HTMLOListElement>.start(value: Flow<Int>) = attr(\"start\", value)\n\nfun Tag<HTMLOListElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLOListElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLOListElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLOListElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\n\n/*\n * HTMLUListElement attributes\n */\nfun Tag<HTMLUListElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLUListElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\nfun Tag<HTMLUListElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLUListElement>.type(value: Flow<String>) = attr(\"type\", value)\n\n\n/*\n * HTMLLIElement attributes\n */\nfun Tag<HTMLLIElement>.value(value: Int) = attr(\"value\", value)\nfun Tag<HTMLLIElement>.value(value: Flow<Int>) = attr(\"value\", value)\n\nfun Tag<HTMLLIElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLLIElement>.type(value: Flow<String>) = attr(\"type\", value)\n\n\n/*\n * HTMLDListElement attributes\n */\nfun Tag<HTMLDListElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLDListElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\n\n/*\n * HTMLDivElement attributes\n */\nfun Tag<HTMLDivElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLDivElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLAnchorElement attributes\n */\nfun Tag<HTMLAnchorElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLAnchorElement>.target(value: Flow<String>) = attr(\"target\", value)\n\nfun Tag<HTMLAnchorElement>.download(value: String) = attr(\"download\", value)\nfun Tag<HTMLAnchorElement>.download(value: Flow<String>) = attr(\"download\", value)\n\nfun Tag<HTMLAnchorElement>.ping(value: String) = attr(\"ping\", value)\nfun Tag<HTMLAnchorElement>.ping(value: Flow<String>) = attr(\"ping\", value)\n\nfun Tag<HTMLAnchorElement>.rel(value: String) = attr(\"rel\", value)\nfun Tag<HTMLAnchorElement>.rel(value: Flow<String>) = attr(\"rel\", value)\n\nfun Tag<HTMLAnchorElement>.hreflang(value: String) = attr(\"hreflang\", value)\nfun Tag<HTMLAnchorElement>.hreflang(value: Flow<String>) = attr(\"hreflang\", value)\n\nfun Tag<HTMLAnchorElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLAnchorElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLAnchorElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLAnchorElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLAnchorElement>.coords(value: String) = attr(\"coords\", value)\nfun Tag<HTMLAnchorElement>.coords(value: Flow<String>) = attr(\"coords\", value)\n\nfun Tag<HTMLAnchorElement>.charset(value: String) = attr(\"charset\", value)\nfun Tag<HTMLAnchorElement>.charset(value: Flow<String>) = attr(\"charset\", value)\n\nfun Tag<HTMLAnchorElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLAnchorElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLAnchorElement>.rev(value: String) = attr(\"rev\", value)\nfun Tag<HTMLAnchorElement>.rev(value: Flow<String>) = attr(\"rev\", value)\n\nfun Tag<HTMLAnchorElement>.shape(value: String) = attr(\"shape\", value)\nfun Tag<HTMLAnchorElement>.shape(value: Flow<String>) = attr(\"shape\", value)\n\n// inherited attributes from supertype HTMLHyperlinkElementUtils\nfun Tag<HTMLAnchorElement>.href(value: String) = attr(\"href\", value)\nfun Tag<HTMLAnchorElement>.href(value: Flow<String>) = attr(\"href\", value)\n\nfun Tag<HTMLAnchorElement>.protocol(value: String) = attr(\"protocol\", value)\nfun Tag<HTMLAnchorElement>.protocol(value: Flow<String>) = attr(\"protocol\", value)\n\nfun Tag<HTMLAnchorElement>.username(value: String) = attr(\"username\", value)\nfun Tag<HTMLAnchorElement>.username(value: Flow<String>) = attr(\"username\", value)\n\nfun Tag<HTMLAnchorElement>.password(value: String) = attr(\"password\", value)\nfun Tag<HTMLAnchorElement>.password(value: Flow<String>) = attr(\"password\", value)\n\nfun Tag<HTMLAnchorElement>.host(value: String) = attr(\"host\", value)\nfun Tag<HTMLAnchorElement>.host(value: Flow<String>) = attr(\"host\", value)\n\nfun Tag<HTMLAnchorElement>.hostname(value: String) = attr(\"hostname\", value)\nfun Tag<HTMLAnchorElement>.hostname(value: Flow<String>) = attr(\"hostname\", value)\n\nfun Tag<HTMLAnchorElement>.port(value: String) = attr(\"port\", value)\nfun Tag<HTMLAnchorElement>.port(value: Flow<String>) = attr(\"port\", value)\n\nfun Tag<HTMLAnchorElement>.pathname(value: String) = attr(\"pathname\", value)\nfun Tag<HTMLAnchorElement>.pathname(value: Flow<String>) = attr(\"pathname\", value)\n\nfun Tag<HTMLAnchorElement>.search(value: String) = attr(\"search\", value)\nfun Tag<HTMLAnchorElement>.search(value: Flow<String>) = attr(\"search\", value)\n\nfun Tag<HTMLAnchorElement>.hash(value: String) = attr(\"hash\", value)\nfun Tag<HTMLAnchorElement>.hash(value: Flow<String>) = attr(\"hash\", value)\n\n\n/*\n * HTMLDataElement attributes\n */\nfun Tag<HTMLDataElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLDataElement>.value(value: Flow<String>) = attr(\"value\", value)\n\n\n/*\n * HTMLTimeElement attributes\n */\nfun Tag<HTMLTimeElement>.dateTime(value: String) = attr(\"datetime\", value)\nfun Tag<HTMLTimeElement>.dateTime(value: Flow<String>) = attr(\"datetime\", value)\n\n\n/*\n * HTMLBRElement attributes\n */\nfun Tag<HTMLBRElement>.clear(value: String) = attr(\"clear\", value)\nfun Tag<HTMLBRElement>.clear(value: Flow<String>) = attr(\"clear\", value)\n\n\n/*\n * HTMLModElement attributes\n */\nfun Tag<HTMLModElement>.cite(value: String) = attr(\"cite\", value)\nfun Tag<HTMLModElement>.cite(value: Flow<String>) = attr(\"cite\", value)\n\nfun Tag<HTMLModElement>.dateTime(value: String) = attr(\"datetime\", value)\nfun Tag<HTMLModElement>.dateTime(value: Flow<String>) = attr(\"datetime\", value)\n\n\n/*\n * HTMLSourceElement attributes\n */\nfun Tag<HTMLSourceElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLSourceElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLSourceElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLSourceElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLSourceElement>.srcset(value: String) = attr(\"srcset\", value)\nfun Tag<HTMLSourceElement>.srcset(value: Flow<String>) = attr(\"srcset\", value)\n\nfun Tag<HTMLSourceElement>.sizes(value: String) = attr(\"sizes\", value)\nfun Tag<HTMLSourceElement>.sizes(value: Flow<String>) = attr(\"sizes\", value)\n\nfun Tag<HTMLSourceElement>.media(value: String) = attr(\"media\", value)\nfun Tag<HTMLSourceElement>.media(value: Flow<String>) = attr(\"media\", value)\n\n\n/*\n * HTMLImageElement attributes\n */\nfun Tag<HTMLImageElement>.alt(value: String) = attr(\"alt\", value)\nfun Tag<HTMLImageElement>.alt(value: Flow<String>) = attr(\"alt\", value)\n\nfun Tag<HTMLImageElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLImageElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLImageElement>.srcset(value: String) = attr(\"srcset\", value)\nfun Tag<HTMLImageElement>.srcset(value: Flow<String>) = attr(\"srcset\", value)\n\nfun Tag<HTMLImageElement>.sizes(value: String) = attr(\"sizes\", value)\nfun Tag<HTMLImageElement>.sizes(value: Flow<String>) = attr(\"sizes\", value)\n\nfun Tag<HTMLImageElement>.crossOrigin(value: String?) = attr(\"crossorigin\", value)\nfun Tag<HTMLImageElement>.crossOrigin(value: Flow<String?>) = attr(\"crossorigin\", value)\n\nfun Tag<HTMLImageElement>.useMap(value: String) = attr(\"usemap\", value)\nfun Tag<HTMLImageElement>.useMap(value: Flow<String>) = attr(\"usemap\", value)\n\nfun Tag<HTMLImageElement>.isMap(value: Boolean, trueValue: String = \"\") = attr(\"ismap\", value, trueValue)\nfun Tag<HTMLImageElement>.isMap(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"ismap\", value, trueValue)\n\nfun Tag<HTMLImageElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLImageElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\nfun Tag<HTMLImageElement>.height(value: Int) = attr(\"height\", value)\nfun Tag<HTMLImageElement>.height(value: Flow<Int>) = attr(\"height\", value)\n\nfun Tag<HTMLImageElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLImageElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLImageElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLImageElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLImageElement>.lowsrc(value: String) = attr(\"lowsrc\", value)\nfun Tag<HTMLImageElement>.lowsrc(value: Flow<String>) = attr(\"lowsrc\", value)\n\nfun Tag<HTMLImageElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLImageElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLImageElement>.hspace(value: Int) = attr(\"hspace\", value)\nfun Tag<HTMLImageElement>.hspace(value: Flow<Int>) = attr(\"hspace\", value)\n\nfun Tag<HTMLImageElement>.vspace(value: Int) = attr(\"vspace\", value)\nfun Tag<HTMLImageElement>.vspace(value: Flow<Int>) = attr(\"vspace\", value)\n\nfun Tag<HTMLImageElement>.longDesc(value: String) = attr(\"longdesc\", value)\nfun Tag<HTMLImageElement>.longDesc(value: Flow<String>) = attr(\"longdesc\", value)\n\nfun Tag<HTMLImageElement>.border(value: String) = attr(\"border\", value)\nfun Tag<HTMLImageElement>.border(value: Flow<String>) = attr(\"border\", value)\n\n\n/*\n * HTMLIFrameElement attributes\n */\nfun Tag<HTMLIFrameElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLIFrameElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLIFrameElement>.srcdoc(value: String) = attr(\"srcdoc\", value)\nfun Tag<HTMLIFrameElement>.srcdoc(value: Flow<String>) = attr(\"srcdoc\", value)\n\nfun Tag<HTMLIFrameElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLIFrameElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLIFrameElement>.allowFullscreen(value: Boolean, trueValue: String = \"\") = attr(\"allowfullscreen\", value, trueValue)\nfun Tag<HTMLIFrameElement>.allowFullscreen(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"allowfullscreen\", value, trueValue)\n\nfun Tag<HTMLIFrameElement>.allowUserMedia(value: Boolean, trueValue: String = \"\") = attr(\"allowusermedia\", value, trueValue)\nfun Tag<HTMLIFrameElement>.allowUserMedia(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"allowusermedia\", value, trueValue)\n\nfun Tag<HTMLIFrameElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLIFrameElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLIFrameElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLIFrameElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLIFrameElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLIFrameElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLIFrameElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLIFrameElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLIFrameElement>.scrolling(value: String) = attr(\"scrolling\", value)\nfun Tag<HTMLIFrameElement>.scrolling(value: Flow<String>) = attr(\"scrolling\", value)\n\nfun Tag<HTMLIFrameElement>.frameBorder(value: String) = attr(\"frameborder\", value)\nfun Tag<HTMLIFrameElement>.frameBorder(value: Flow<String>) = attr(\"frameborder\", value)\n\nfun Tag<HTMLIFrameElement>.longDesc(value: String) = attr(\"longdesc\", value)\nfun Tag<HTMLIFrameElement>.longDesc(value: Flow<String>) = attr(\"longdesc\", value)\n\nfun Tag<HTMLIFrameElement>.marginHeight(value: String) = attr(\"marginheight\", value)\nfun Tag<HTMLIFrameElement>.marginHeight(value: Flow<String>) = attr(\"marginheight\", value)\n\nfun Tag<HTMLIFrameElement>.marginWidth(value: String) = attr(\"marginwidth\", value)\nfun Tag<HTMLIFrameElement>.marginWidth(value: Flow<String>) = attr(\"marginwidth\", value)\n\n\n/*\n * HTMLEmbedElement attributes\n */\nfun Tag<HTMLEmbedElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLEmbedElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLEmbedElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLEmbedElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLEmbedElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLEmbedElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLEmbedElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLEmbedElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLEmbedElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLEmbedElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLEmbedElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLEmbedElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLObjectElement attributes\n */\nfun Tag<HTMLObjectElement>.data(value: String) = attr(\"data\", value)\nfun Tag<HTMLObjectElement>.data(value: Flow<String>) = attr(\"data\", value)\n\nfun Tag<HTMLObjectElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLObjectElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLObjectElement>.typeMustMatch(value: Boolean, trueValue: String = \"\") = attr(\"typemustmatch\", value, trueValue)\nfun Tag<HTMLObjectElement>.typeMustMatch(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"typemustmatch\", value, trueValue)\n\nfun Tag<HTMLObjectElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLObjectElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLObjectElement>.useMap(value: String) = attr(\"usemap\", value)\nfun Tag<HTMLObjectElement>.useMap(value: Flow<String>) = attr(\"usemap\", value)\n\nfun Tag<HTMLObjectElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLObjectElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLObjectElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLObjectElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLObjectElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLObjectElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLObjectElement>.archive(value: String) = attr(\"archive\", value)\nfun Tag<HTMLObjectElement>.archive(value: Flow<String>) = attr(\"archive\", value)\n\nfun Tag<HTMLObjectElement>.code(value: String) = attr(\"code\", value)\nfun Tag<HTMLObjectElement>.code(value: Flow<String>) = attr(\"code\", value)\n\nfun Tag<HTMLObjectElement>.declare(value: Boolean, trueValue: String = \"\") = attr(\"declare\", value, trueValue)\nfun Tag<HTMLObjectElement>.declare(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"declare\", value, trueValue)\n\nfun Tag<HTMLObjectElement>.hspace(value: Int) = attr(\"hspace\", value)\nfun Tag<HTMLObjectElement>.hspace(value: Flow<Int>) = attr(\"hspace\", value)\n\nfun Tag<HTMLObjectElement>.standby(value: String) = attr(\"standby\", value)\nfun Tag<HTMLObjectElement>.standby(value: Flow<String>) = attr(\"standby\", value)\n\nfun Tag<HTMLObjectElement>.vspace(value: Int) = attr(\"vspace\", value)\nfun Tag<HTMLObjectElement>.vspace(value: Flow<Int>) = attr(\"vspace\", value)\n\nfun Tag<HTMLObjectElement>.codeBase(value: String) = attr(\"codebase\", value)\nfun Tag<HTMLObjectElement>.codeBase(value: Flow<String>) = attr(\"codebase\", value)\n\nfun Tag<HTMLObjectElement>.codeType(value: String) = attr(\"codetype\", value)\nfun Tag<HTMLObjectElement>.codeType(value: Flow<String>) = attr(\"codetype\", value)\n\nfun Tag<HTMLObjectElement>.border(value: String) = attr(\"border\", value)\nfun Tag<HTMLObjectElement>.border(value: Flow<String>) = attr(\"border\", value)\n\n\n/*\n * HTMLParamElement attributes\n */\nfun Tag<HTMLParamElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLParamElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLParamElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLParamElement>.value(value: Flow<String>) = attr(\"value\", value)\n\nfun Tag<HTMLParamElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLParamElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLParamElement>.valueType(value: String) = attr(\"valuetype\", value)\nfun Tag<HTMLParamElement>.valueType(value: Flow<String>) = attr(\"valuetype\", value)\n\n\n/*\n * HTMLVideoElement attributes\n */\nfun Tag<HTMLVideoElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLVideoElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\nfun Tag<HTMLVideoElement>.height(value: Int) = attr(\"height\", value)\nfun Tag<HTMLVideoElement>.height(value: Flow<Int>) = attr(\"height\", value)\n\nfun Tag<HTMLVideoElement>.poster(value: String) = attr(\"poster\", value)\nfun Tag<HTMLVideoElement>.poster(value: Flow<String>) = attr(\"poster\", value)\n\nfun Tag<HTMLVideoElement>.playsInline(value: Boolean, trueValue: String = \"\") = attr(\"playsinline\", value, trueValue)\nfun Tag<HTMLVideoElement>.playsInline(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"playsinline\", value, trueValue)\n\n\n/*\n * HTMLTrackElement attributes\n */\nfun Tag<HTMLTrackElement>.kind(value: String) = attr(\"kind\", value)\nfun Tag<HTMLTrackElement>.kind(value: Flow<String>) = attr(\"kind\", value)\n\nfun Tag<HTMLTrackElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLTrackElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLTrackElement>.srclang(value: String) = attr(\"srclang\", value)\nfun Tag<HTMLTrackElement>.srclang(value: Flow<String>) = attr(\"srclang\", value)\n\nfun Tag<HTMLTrackElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLTrackElement>.label(value: Flow<String>) = attr(\"label\", value)\n\nfun Tag<HTMLTrackElement>.default(value: Boolean, trueValue: String = \"\") = attr(\"default\", value, trueValue)\nfun Tag<HTMLTrackElement>.default(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"default\", value, trueValue)\n\n\n/*\n * HTMLMediaElement attributes\n */\nfun Tag<HTMLMediaElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLMediaElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLMediaElement>.srcObject(value: MediaProvider?) = attr(\"srcobject\", value)\nfun Tag<HTMLMediaElement>.srcObject(value: Flow<MediaProvider?>) = attr(\"srcobject\", value)\n\nfun Tag<HTMLMediaElement>.crossOrigin(value: String?) = attr(\"crossorigin\", value)\nfun Tag<HTMLMediaElement>.crossOrigin(value: Flow<String?>) = attr(\"crossorigin\", value)\n\nfun Tag<HTMLMediaElement>.preload(value: String) = attr(\"preload\", value)\nfun Tag<HTMLMediaElement>.preload(value: Flow<String>) = attr(\"preload\", value)\n\nfun Tag<HTMLMediaElement>.currentTime(value: Double) = attr(\"currenttime\", value)\nfun Tag<HTMLMediaElement>.currentTime(value: Flow<Double>) = attr(\"currenttime\", value)\n\nfun Tag<HTMLMediaElement>.defaultPlaybackRate(value: Double) = attr(\"defaultplaybackrate\", value)\nfun Tag<HTMLMediaElement>.defaultPlaybackRate(value: Flow<Double>) = attr(\"defaultplaybackrate\", value)\n\nfun Tag<HTMLMediaElement>.playbackRate(value: Double) {\n    domNode.playbackRate = value\n    domNode.defaultPlaybackRate = value\n    domNode.setAttribute(\"playbackrate\", value.toString())\n}\n\nfun Tag<HTMLMediaElement>.playbackRate(value: Flow<Double>) {\n    mountSimple(job, value) { v -> playbackRate(v) }\n}\n\nfun Tag<HTMLMediaElement>.autoplay(value: Boolean, trueValue: String = \"\") = attr(\"autoplay\", value, trueValue)\nfun Tag<HTMLMediaElement>.autoplay(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autoplay\", value, trueValue)\n\nfun Tag<HTMLMediaElement>.loop(value: Boolean, trueValue: String = \"\") = attr(\"loop\", value, trueValue)\nfun Tag<HTMLMediaElement>.loop(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"loop\", value, trueValue)\n\nfun Tag<HTMLMediaElement>.controls(value: Boolean, trueValue: String = \"\") = attr(\"controls\", value, trueValue)\nfun Tag<HTMLMediaElement>.controls(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"controls\", value, trueValue)\n\nfun Tag<HTMLMediaElement>.volume(value: Double) = attr(\"volume\", value)\nfun Tag<HTMLMediaElement>.volume(value: Flow<Double>) = attr(\"volume\", value)\n\nfun Tag<HTMLMediaElement>.muted(value: Boolean, trueValue: String = \"\") {\n    domNode.muted = value\n    domNode.defaultMuted = value\n    if (value) domNode.setAttribute(\"muted\", trueValue)\n    else domNode.removeAttribute(\"muted\")\n}\n\nfun Tag<HTMLMediaElement>.muted(value: Flow<Boolean>, trueValue: String = \"\") {\n    mountSimple(job, value) { v -> muted(v, trueValue) }\n}\n\nfun Tag<HTMLMediaElement>.defaultMuted(value: Boolean, trueValue: String = \"\") = attr(\"defaultmuted\", value, trueValue)\nfun Tag<HTMLMediaElement>.defaultMuted(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"defaultmuted\", value, trueValue)\n\n\n/*\n * HTMLMapElement attributes\n */\nfun Tag<HTMLMapElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLMapElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLAreaElement attributes\n */\nfun Tag<HTMLAreaElement>.alt(value: String) = attr(\"alt\", value)\nfun Tag<HTMLAreaElement>.alt(value: Flow<String>) = attr(\"alt\", value)\n\nfun Tag<HTMLAreaElement>.coords(value: String) = attr(\"coords\", value)\nfun Tag<HTMLAreaElement>.coords(value: Flow<String>) = attr(\"coords\", value)\n\nfun Tag<HTMLAreaElement>.shape(value: String) = attr(\"shape\", value)\nfun Tag<HTMLAreaElement>.shape(value: Flow<String>) = attr(\"shape\", value)\n\nfun Tag<HTMLAreaElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLAreaElement>.target(value: Flow<String>) = attr(\"target\", value)\n\nfun Tag<HTMLAreaElement>.download(value: String) = attr(\"download\", value)\nfun Tag<HTMLAreaElement>.download(value: Flow<String>) = attr(\"download\", value)\n\nfun Tag<HTMLAreaElement>.ping(value: String) = attr(\"ping\", value)\nfun Tag<HTMLAreaElement>.ping(value: Flow<String>) = attr(\"ping\", value)\n\nfun Tag<HTMLAreaElement>.rel(value: String) = attr(\"rel\", value)\nfun Tag<HTMLAreaElement>.rel(value: Flow<String>) = attr(\"rel\", value)\n\nfun Tag<HTMLAreaElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLAreaElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLAreaElement>.noHref(value: Boolean, trueValue: String = \"\") = attr(\"nohref\", value, trueValue)\nfun Tag<HTMLAreaElement>.noHref(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"nohref\", value, trueValue)\n\n// inherited attributes from supertype HTMLHyperlinkElementUtils\nfun Tag<HTMLAreaElement>.href(value: String) = attr(\"href\", value)\nfun Tag<HTMLAreaElement>.href(value: Flow<String>) = attr(\"href\", value)\n\nfun Tag<HTMLAreaElement>.protocol(value: String) = attr(\"protocol\", value)\nfun Tag<HTMLAreaElement>.protocol(value: Flow<String>) = attr(\"protocol\", value)\n\nfun Tag<HTMLAreaElement>.username(value: String) = attr(\"username\", value)\nfun Tag<HTMLAreaElement>.username(value: Flow<String>) = attr(\"username\", value)\n\nfun Tag<HTMLAreaElement>.password(value: String) = attr(\"password\", value)\nfun Tag<HTMLAreaElement>.password(value: Flow<String>) = attr(\"password\", value)\n\nfun Tag<HTMLAreaElement>.host(value: String) = attr(\"host\", value)\nfun Tag<HTMLAreaElement>.host(value: Flow<String>) = attr(\"host\", value)\n\nfun Tag<HTMLAreaElement>.hostname(value: String) = attr(\"hostname\", value)\nfun Tag<HTMLAreaElement>.hostname(value: Flow<String>) = attr(\"hostname\", value)\n\nfun Tag<HTMLAreaElement>.port(value: String) = attr(\"port\", value)\nfun Tag<HTMLAreaElement>.port(value: Flow<String>) = attr(\"port\", value)\n\nfun Tag<HTMLAreaElement>.pathname(value: String) = attr(\"pathname\", value)\nfun Tag<HTMLAreaElement>.pathname(value: Flow<String>) = attr(\"pathname\", value)\n\nfun Tag<HTMLAreaElement>.search(value: String) = attr(\"search\", value)\nfun Tag<HTMLAreaElement>.search(value: Flow<String>) = attr(\"search\", value)\n\nfun Tag<HTMLAreaElement>.hash(value: String) = attr(\"hash\", value)\nfun Tag<HTMLAreaElement>.hash(value: Flow<String>) = attr(\"hash\", value)\n\n\n/*\n * HTMLTableElement attributes\n */\nfun Tag<HTMLTableElement>.caption(value: HTMLTableCaptionElement?) = attr(\"caption\", value)\nfun Tag<HTMLTableElement>.caption(value: Flow<HTMLTableCaptionElement?>) = attr(\"caption\", value)\n\nfun Tag<HTMLTableElement>.tHead(value: HTMLTableSectionElement?) = attr(\"thead\", value)\nfun Tag<HTMLTableElement>.tHead(value: Flow<HTMLTableSectionElement?>) = attr(\"thead\", value)\n\nfun Tag<HTMLTableElement>.tFoot(value: HTMLTableSectionElement?) = attr(\"tfoot\", value)\nfun Tag<HTMLTableElement>.tFoot(value: Flow<HTMLTableSectionElement?>) = attr(\"tfoot\", value)\n\nfun Tag<HTMLTableElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableElement>.border(value: String) = attr(\"border\", value)\nfun Tag<HTMLTableElement>.border(value: Flow<String>) = attr(\"border\", value)\n\nfun Tag<HTMLTableElement>.frame(value: String) = attr(\"frame\", value)\nfun Tag<HTMLTableElement>.frame(value: Flow<String>) = attr(\"frame\", value)\n\nfun Tag<HTMLTableElement>.rules(value: String) = attr(\"rules\", value)\nfun Tag<HTMLTableElement>.rules(value: Flow<String>) = attr(\"rules\", value)\n\nfun Tag<HTMLTableElement>.summary(value: String) = attr(\"summary\", value)\nfun Tag<HTMLTableElement>.summary(value: Flow<String>) = attr(\"summary\", value)\n\nfun Tag<HTMLTableElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLTableElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLTableElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLTableElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\nfun Tag<HTMLTableElement>.cellPadding(value: String) = attr(\"cellpadding\", value)\nfun Tag<HTMLTableElement>.cellPadding(value: Flow<String>) = attr(\"cellpadding\", value)\n\nfun Tag<HTMLTableElement>.cellSpacing(value: String) = attr(\"cellspacing\", value)\nfun Tag<HTMLTableElement>.cellSpacing(value: Flow<String>) = attr(\"cellspacing\", value)\n\n\n/*\n * HTMLTableCaptionElement attributes\n */\nfun Tag<HTMLTableCaptionElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableCaptionElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLTableColElement attributes\n */\nfun Tag<HTMLTableColElement>.span(value: Int) = attr(\"span\", value)\nfun Tag<HTMLTableColElement>.span(value: Flow<Int>) = attr(\"span\", value)\n\nfun Tag<HTMLTableColElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableColElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableColElement>.ch(value: String) = attr(\"ch\", value)\nfun Tag<HTMLTableColElement>.ch(value: Flow<String>) = attr(\"ch\", value)\n\nfun Tag<HTMLTableColElement>.chOff(value: String) = attr(\"choff\", value)\nfun Tag<HTMLTableColElement>.chOff(value: Flow<String>) = attr(\"choff\", value)\n\nfun Tag<HTMLTableColElement>.vAlign(value: String) = attr(\"valign\", value)\nfun Tag<HTMLTableColElement>.vAlign(value: Flow<String>) = attr(\"valign\", value)\n\nfun Tag<HTMLTableColElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLTableColElement>.width(value: Flow<String>) = attr(\"width\", value)\n\n\n/*\n * HTMLTableSectionElement attributes\n */\nfun Tag<HTMLTableSectionElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableSectionElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableSectionElement>.ch(value: String) = attr(\"ch\", value)\nfun Tag<HTMLTableSectionElement>.ch(value: Flow<String>) = attr(\"ch\", value)\n\nfun Tag<HTMLTableSectionElement>.chOff(value: String) = attr(\"choff\", value)\nfun Tag<HTMLTableSectionElement>.chOff(value: Flow<String>) = attr(\"choff\", value)\n\nfun Tag<HTMLTableSectionElement>.vAlign(value: String) = attr(\"valign\", value)\nfun Tag<HTMLTableSectionElement>.vAlign(value: Flow<String>) = attr(\"valign\", value)\n\n\n/*\n * HTMLTableRowElement attributes\n */\nfun Tag<HTMLTableRowElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableRowElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableRowElement>.ch(value: String) = attr(\"ch\", value)\nfun Tag<HTMLTableRowElement>.ch(value: Flow<String>) = attr(\"ch\", value)\n\nfun Tag<HTMLTableRowElement>.chOff(value: String) = attr(\"choff\", value)\nfun Tag<HTMLTableRowElement>.chOff(value: Flow<String>) = attr(\"choff\", value)\n\nfun Tag<HTMLTableRowElement>.vAlign(value: String) = attr(\"valign\", value)\nfun Tag<HTMLTableRowElement>.vAlign(value: Flow<String>) = attr(\"valign\", value)\n\nfun Tag<HTMLTableRowElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLTableRowElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\n\n/*\n * HTMLTableCellElement attributes\n */\nfun Tag<HTMLTableCellElement>.colSpan(value: Int) = attr(\"colspan\", value)\nfun Tag<HTMLTableCellElement>.colSpan(value: Flow<Int>) = attr(\"colspan\", value)\n\nfun Tag<HTMLTableCellElement>.rowSpan(value: Int) = attr(\"rowspan\", value)\nfun Tag<HTMLTableCellElement>.rowSpan(value: Flow<Int>) = attr(\"rowspan\", value)\n\nfun Tag<HTMLTableCellElement>.headers(value: String) = attr(\"headers\", value)\nfun Tag<HTMLTableCellElement>.headers(value: Flow<String>) = attr(\"headers\", value)\n\nfun Tag<HTMLTableCellElement>.scope(value: String) = attr(\"scope\", value)\nfun Tag<HTMLTableCellElement>.scope(value: Flow<String>) = attr(\"scope\", value)\n\nfun Tag<HTMLTableCellElement>.abbr(value: String) = attr(\"abbr\", value)\nfun Tag<HTMLTableCellElement>.abbr(value: Flow<String>) = attr(\"abbr\", value)\n\nfun Tag<HTMLTableCellElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableCellElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableCellElement>.axis(value: String) = attr(\"axis\", value)\nfun Tag<HTMLTableCellElement>.axis(value: Flow<String>) = attr(\"axis\", value)\n\nfun Tag<HTMLTableCellElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLTableCellElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLTableCellElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLTableCellElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLTableCellElement>.ch(value: String) = attr(\"ch\", value)\nfun Tag<HTMLTableCellElement>.ch(value: Flow<String>) = attr(\"ch\", value)\n\nfun Tag<HTMLTableCellElement>.chOff(value: String) = attr(\"choff\", value)\nfun Tag<HTMLTableCellElement>.chOff(value: Flow<String>) = attr(\"choff\", value)\n\nfun Tag<HTMLTableCellElement>.noWrap(value: Boolean, trueValue: String = \"\") = attr(\"nowrap\", value, trueValue)\nfun Tag<HTMLTableCellElement>.noWrap(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"nowrap\", value, trueValue)\n\nfun Tag<HTMLTableCellElement>.vAlign(value: String) = attr(\"valign\", value)\nfun Tag<HTMLTableCellElement>.vAlign(value: Flow<String>) = attr(\"valign\", value)\n\nfun Tag<HTMLTableCellElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLTableCellElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\n\n/*\n * HTMLFormElement attributes\n */\nfun Tag<HTMLFormElement>.acceptCharset(value: String) = attr(\"acceptcharset\", value)\nfun Tag<HTMLFormElement>.acceptCharset(value: Flow<String>) = attr(\"acceptcharset\", value)\n\nfun Tag<HTMLFormElement>.action(value: String) = attr(\"action\", value)\nfun Tag<HTMLFormElement>.action(value: Flow<String>) = attr(\"action\", value)\n\nfun Tag<HTMLFormElement>.autocomplete(value: String) = attr(\"autocomplete\", value)\nfun Tag<HTMLFormElement>.autocomplete(value: Flow<String>) = attr(\"autocomplete\", value)\n\nfun Tag<HTMLFormElement>.enctype(value: String) = attr(\"enctype\", value)\nfun Tag<HTMLFormElement>.enctype(value: Flow<String>) = attr(\"enctype\", value)\n\nfun Tag<HTMLFormElement>.encoding(value: String) = attr(\"encoding\", value)\nfun Tag<HTMLFormElement>.encoding(value: Flow<String>) = attr(\"encoding\", value)\n\nfun Tag<HTMLFormElement>.method(value: String) = attr(\"method\", value)\nfun Tag<HTMLFormElement>.method(value: Flow<String>) = attr(\"method\", value)\n\nfun Tag<HTMLFormElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLFormElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLFormElement>.noValidate(value: Boolean, trueValue: String = \"\") = attr(\"novalidate\", value, trueValue)\nfun Tag<HTMLFormElement>.noValidate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"novalidate\", value, trueValue)\n\nfun Tag<HTMLFormElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLFormElement>.target(value: Flow<String>) = attr(\"target\", value)\n\n\n/*\n * HTMLLabelElement attributes\n */\nfun Tag<HTMLLabelElement>.`for`(value: String) = attr(\"for\", value)\nfun Tag<HTMLLabelElement>.`for`(value: Flow<String>) = attr(\"for\", value)\n\n\n/*\n * HTMLInputElement attributes\n */\nfun Tag<HTMLInputElement>.accept(value: String) = attr(\"accept\", value)\nfun Tag<HTMLInputElement>.accept(value: Flow<String>) = attr(\"accept\", value)\n\nfun Tag<HTMLInputElement>.alt(value: String) = attr(\"alt\", value)\nfun Tag<HTMLInputElement>.alt(value: Flow<String>) = attr(\"alt\", value)\n\nfun Tag<HTMLInputElement>.autocomplete(value: String) = attr(\"autocomplete\", value)\nfun Tag<HTMLInputElement>.autocomplete(value: Flow<String>) = attr(\"autocomplete\", value)\n\nfun Tag<HTMLInputElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLInputElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLInputElement>.defaultChecked(value: Boolean, trueValue: String = \"\") = attr(\"defaultchecked\", value, trueValue)\nfun Tag<HTMLInputElement>.defaultChecked(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"defaultchecked\", value, trueValue)\n\nfun Tag<HTMLInputElement>.checked(value: Boolean, trueValue: String = \"\") {\n    domNode.checked = value\n    domNode.defaultChecked = value\n    if (value) domNode.setAttribute(\"checked\", trueValue)\n    else domNode.removeAttribute(\"checked\")\n}\n\nfun Tag<HTMLInputElement>.checked(value: Flow<Boolean>, trueValue: String = \"\") {\n    mountSimple(job, value) { v -> checked(v, trueValue) }\n}\n\nfun Tag<HTMLInputElement>.dirName(value: String) = attr(\"dirname\", value)\nfun Tag<HTMLInputElement>.dirName(value: Flow<String>) = attr(\"dirname\", value)\n\nfun Tag<HTMLInputElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLInputElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLInputElement>.formAction(value: String) = attr(\"formaction\", value)\nfun Tag<HTMLInputElement>.formAction(value: Flow<String>) = attr(\"formaction\", value)\n\nfun Tag<HTMLInputElement>.formEnctype(value: String) = attr(\"formenctype\", value)\nfun Tag<HTMLInputElement>.formEnctype(value: Flow<String>) = attr(\"formenctype\", value)\n\nfun Tag<HTMLInputElement>.formMethod(value: String) = attr(\"formmethod\", value)\nfun Tag<HTMLInputElement>.formMethod(value: Flow<String>) = attr(\"formmethod\", value)\n\nfun Tag<HTMLInputElement>.formNoValidate(value: Boolean, trueValue: String = \"\") = attr(\"formnovalidate\", value, trueValue)\nfun Tag<HTMLInputElement>.formNoValidate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"formnovalidate\", value, trueValue)\n\nfun Tag<HTMLInputElement>.formTarget(value: String) = attr(\"formtarget\", value)\nfun Tag<HTMLInputElement>.formTarget(value: Flow<String>) = attr(\"formtarget\", value)\n\nfun Tag<HTMLInputElement>.height(value: Int) = attr(\"height\", value)\nfun Tag<HTMLInputElement>.height(value: Flow<Int>) = attr(\"height\", value)\n\nfun Tag<HTMLInputElement>.indeterminate(value: Boolean, trueValue: String = \"\") = attr(\"indeterminate\", value, trueValue)\nfun Tag<HTMLInputElement>.indeterminate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"indeterminate\", value, trueValue)\n\nfun Tag<HTMLInputElement>.inputMode(value: String) = attr(\"inputmode\", value)\nfun Tag<HTMLInputElement>.inputMode(value: Flow<String>) = attr(\"inputmode\", value)\n\nfun Tag<HTMLInputElement>.max(value: String) = attr(\"max\", value)\nfun Tag<HTMLInputElement>.max(value: Flow<String>) = attr(\"max\", value)\n\nfun Tag<HTMLInputElement>.maxLength(value: Int) = attr(\"maxlength\", value)\nfun Tag<HTMLInputElement>.maxLength(value: Flow<Int>) = attr(\"maxlength\", value)\n\nfun Tag<HTMLInputElement>.min(value: String) = attr(\"min\", value)\nfun Tag<HTMLInputElement>.min(value: Flow<String>) = attr(\"min\", value)\n\nfun Tag<HTMLInputElement>.minLength(value: Int) = attr(\"minlength\", value)\nfun Tag<HTMLInputElement>.minLength(value: Flow<Int>) = attr(\"minlength\", value)\n\nfun Tag<HTMLInputElement>.multiple(value: Boolean, trueValue: String = \"\") = attr(\"multiple\", value, trueValue)\nfun Tag<HTMLInputElement>.multiple(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"multiple\", value, trueValue)\n\nfun Tag<HTMLInputElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLInputElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLInputElement>.pattern(value: String) = attr(\"pattern\", value)\nfun Tag<HTMLInputElement>.pattern(value: Flow<String>) = attr(\"pattern\", value)\n\nfun Tag<HTMLInputElement>.placeholder(value: String) = attr(\"placeholder\", value)\nfun Tag<HTMLInputElement>.placeholder(value: Flow<String>) = attr(\"placeholder\", value)\n\nfun Tag<HTMLInputElement>.readOnly(value: Boolean, trueValue: String = \"\") = attr(\"readonly\", value, trueValue)\nfun Tag<HTMLInputElement>.readOnly(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"readonly\", value, trueValue)\n\nfun Tag<HTMLInputElement>.required(value: Boolean, trueValue: String = \"\") = attr(\"required\", value, trueValue)\nfun Tag<HTMLInputElement>.required(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"required\", value, trueValue)\n\nfun Tag<HTMLInputElement>.size(value: Int) = attr(\"size\", value)\nfun Tag<HTMLInputElement>.size(value: Flow<Int>) = attr(\"size\", value)\n\nfun Tag<HTMLInputElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLInputElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLInputElement>.step(value: String) = attr(\"step\", value)\nfun Tag<HTMLInputElement>.step(value: Flow<String>) = attr(\"step\", value)\n\nfun Tag<HTMLInputElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLInputElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLInputElement>.defaultValue(value: String) = attr(\"defaultvalue\", value)\nfun Tag<HTMLInputElement>.defaultValue(value: Flow<String>) = attr(\"defaultvalue\", value)\n\nfun Tag<HTMLInputElement>.value(value: String) {\n    domNode.value = value\n    domNode.defaultValue = value\n    domNode.setAttribute(\"value\", value)\n}\n\nfun Tag<HTMLInputElement>.value(value: Flow<String>) {\n    mountSimple(job, value) { v -> value(v) }\n}\n\nfun Tag<HTMLInputElement>.valueAsDate(value: String) = attr(\"valueasdate\", value)\nfun Tag<HTMLInputElement>.valueAsDate(value: Flow<String>) = attr(\"valueasdate\", value)\n\nfun Tag<HTMLInputElement>.valueAsNumber(value: Double) = attr(\"valueasnumber\", value)\nfun Tag<HTMLInputElement>.valueAsNumber(value: Flow<Double>) = attr(\"valueasnumber\", value)\n\nfun Tag<HTMLInputElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLInputElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\nfun Tag<HTMLInputElement>.selectionStart(value: Int?) = attr(\"selectionstart\", value)\nfun Tag<HTMLInputElement>.selectionStart(value: Flow<Int?>) = attr(\"selectionstart\", value)\n\nfun Tag<HTMLInputElement>.selectionEnd(value: Int?) = attr(\"selectionend\", value)\nfun Tag<HTMLInputElement>.selectionEnd(value: Flow<Int?>) = attr(\"selectionend\", value)\n\nfun Tag<HTMLInputElement>.selectionDirection(value: String?) = attr(\"selectiondirection\", value)\nfun Tag<HTMLInputElement>.selectionDirection(value: Flow<String?>) = attr(\"selectiondirection\", value)\n\nfun Tag<HTMLInputElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLInputElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLInputElement>.useMap(value: String) = attr(\"usemap\", value)\nfun Tag<HTMLInputElement>.useMap(value: Flow<String>) = attr(\"usemap\", value)\n\n\n/*\n * HTMLButtonElement attributes\n */\nfun Tag<HTMLButtonElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLButtonElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLButtonElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLButtonElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLButtonElement>.formAction(value: String) = attr(\"formaction\", value)\nfun Tag<HTMLButtonElement>.formAction(value: Flow<String>) = attr(\"formaction\", value)\n\nfun Tag<HTMLButtonElement>.formEnctype(value: String) = attr(\"formenctype\", value)\nfun Tag<HTMLButtonElement>.formEnctype(value: Flow<String>) = attr(\"formenctype\", value)\n\nfun Tag<HTMLButtonElement>.formMethod(value: String) = attr(\"formmethod\", value)\nfun Tag<HTMLButtonElement>.formMethod(value: Flow<String>) = attr(\"formmethod\", value)\n\nfun Tag<HTMLButtonElement>.formNoValidate(value: Boolean, trueValue: String = \"\") = attr(\"formnovalidate\", value, trueValue)\nfun Tag<HTMLButtonElement>.formNoValidate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"formnovalidate\", value, trueValue)\n\nfun Tag<HTMLButtonElement>.formTarget(value: String) = attr(\"formtarget\", value)\nfun Tag<HTMLButtonElement>.formTarget(value: Flow<String>) = attr(\"formtarget\", value)\n\nfun Tag<HTMLButtonElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLButtonElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLButtonElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLButtonElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLButtonElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLButtonElement>.value(value: Flow<String>) = attr(\"value\", value)\n\nfun Tag<HTMLButtonElement>.menu(value: HTMLMenuElement?) = attr(\"menu\", value)\nfun Tag<HTMLButtonElement>.menu(value: Flow<HTMLMenuElement?>) = attr(\"menu\", value)\n\n\n/*\n * HTMLSelectElement attributes\n */\nfun Tag<HTMLSelectElement>.autocomplete(value: String) = attr(\"autocomplete\", value)\nfun Tag<HTMLSelectElement>.autocomplete(value: Flow<String>) = attr(\"autocomplete\", value)\n\nfun Tag<HTMLSelectElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLSelectElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLSelectElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLSelectElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLSelectElement>.multiple(value: Boolean, trueValue: String = \"\") = attr(\"multiple\", value, trueValue)\nfun Tag<HTMLSelectElement>.multiple(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"multiple\", value, trueValue)\n\nfun Tag<HTMLSelectElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLSelectElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLSelectElement>.required(value: Boolean, trueValue: String = \"\") = attr(\"required\", value, trueValue)\nfun Tag<HTMLSelectElement>.required(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"required\", value, trueValue)\n\nfun Tag<HTMLSelectElement>.size(value: Int) = attr(\"size\", value)\nfun Tag<HTMLSelectElement>.size(value: Flow<Int>) = attr(\"size\", value)\n\nfun Tag<HTMLSelectElement>.length(value: Int) = attr(\"length\", value)\nfun Tag<HTMLSelectElement>.length(value: Flow<Int>) = attr(\"length\", value)\n\nfun Tag<HTMLSelectElement>.selectedIndex(value: Int) = attr(\"selectedindex\", value)\nfun Tag<HTMLSelectElement>.selectedIndex(value: Flow<Int>) = attr(\"selectedindex\", value)\n\nfun Tag<HTMLSelectElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLSelectElement>.value(value: Flow<String>) = attr(\"value\", value)\n\n\n/*\n * HTMLOptGroupElement attributes\n */\nfun Tag<HTMLOptGroupElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLOptGroupElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLOptGroupElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLOptGroupElement>.label(value: Flow<String>) = attr(\"label\", value)\n\n\n/*\n * HTMLOptionElement attributes\n */\nfun Tag<HTMLOptionElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLOptionElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLOptionElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLOptionElement>.label(value: Flow<String>) = attr(\"label\", value)\n\nfun Tag<HTMLOptionElement>.defaultSelected(value: Boolean, trueValue: String = \"\") = attr(\"defaultselected\", value, trueValue)\nfun Tag<HTMLOptionElement>.defaultSelected(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"defaultselected\", value, trueValue)\n\nfun Tag<HTMLOptionElement>.selected(value: Boolean, trueValue: String = \"\") {\n    domNode.selected = value\n    domNode.defaultSelected = value\n    if (value) domNode.setAttribute(\"selected\", trueValue)\n    else domNode.removeAttribute(\"selected\")\n}\n\nfun Tag<HTMLOptionElement>.selected(value: Flow<Boolean>, trueValue: String = \"\") {\n    mountSimple(job, value) { v -> selected(v, trueValue) }\n}\n\nfun Tag<HTMLOptionElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLOptionElement>.value(value: Flow<String>) = attr(\"value\", value)\n\n/*\n * HTMLTextAreaElement attributes\n */\nfun Tag<HTMLTextAreaElement>.autocomplete(value: String) = attr(\"autocomplete\", value)\nfun Tag<HTMLTextAreaElement>.autocomplete(value: Flow<String>) = attr(\"autocomplete\", value)\n\nfun Tag<HTMLTextAreaElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLTextAreaElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLTextAreaElement>.cols(value: Int) = attr(\"cols\", value)\nfun Tag<HTMLTextAreaElement>.cols(value: Flow<Int>) = attr(\"cols\", value)\n\nfun Tag<HTMLTextAreaElement>.dirName(value: String) = attr(\"dirname\", value)\nfun Tag<HTMLTextAreaElement>.dirName(value: Flow<String>) = attr(\"dirname\", value)\n\nfun Tag<HTMLTextAreaElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLTextAreaElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLTextAreaElement>.inputMode(value: String) = attr(\"inputmode\", value)\nfun Tag<HTMLTextAreaElement>.inputMode(value: Flow<String>) = attr(\"inputmode\", value)\n\nfun Tag<HTMLTextAreaElement>.maxLength(value: Int) = attr(\"maxlength\", value)\nfun Tag<HTMLTextAreaElement>.maxLength(value: Flow<Int>) = attr(\"maxlength\", value)\n\nfun Tag<HTMLTextAreaElement>.minLength(value: Int) = attr(\"minlength\", value)\nfun Tag<HTMLTextAreaElement>.minLength(value: Flow<Int>) = attr(\"minlength\", value)\n\nfun Tag<HTMLTextAreaElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLTextAreaElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLTextAreaElement>.placeholder(value: String) = attr(\"placeholder\", value)\nfun Tag<HTMLTextAreaElement>.placeholder(value: Flow<String>) = attr(\"placeholder\", value)\n\nfun Tag<HTMLTextAreaElement>.readOnly(value: Boolean, trueValue: String = \"\") = attr(\"readonly\", value, trueValue)\nfun Tag<HTMLTextAreaElement>.readOnly(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"readonly\", value, trueValue)\n\nfun Tag<HTMLTextAreaElement>.required(value: Boolean, trueValue: String = \"\") = attr(\"required\", value, trueValue)\nfun Tag<HTMLTextAreaElement>.required(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"required\", value, trueValue)\n\nfun Tag<HTMLTextAreaElement>.rows(value: Int) = attr(\"rows\", value)\nfun Tag<HTMLTextAreaElement>.rows(value: Flow<Int>) = attr(\"rows\", value)\n\nfun Tag<HTMLTextAreaElement>.wrap(value: String) = attr(\"wrap\", value)\nfun Tag<HTMLTextAreaElement>.wrap(value: Flow<String>) = attr(\"wrap\", value)\n\nfun Tag<HTMLTextAreaElement>.defaultValue(value: String) = attr(\"defaultvalue\", value)\nfun Tag<HTMLTextAreaElement>.defaultValue(value: Flow<String>) = attr(\"defaultvalue\", value)\n\nfun Tag<HTMLTextAreaElement>.value(value: String) {\n    domNode.value = value\n    domNode.defaultValue = value\n    domNode.setAttribute(\"value\", value)\n}\n\nfun Tag<HTMLTextAreaElement>.value(value: Flow<String>) {\n    mountSimple(job, value) { v -> value(v) }\n}\n\nfun Tag<HTMLTextAreaElement>.selectionStart(value: Int?) = attr(\"selectionstart\", value)\nfun Tag<HTMLTextAreaElement>.selectionStart(value: Flow<Int?>) = attr(\"selectionstart\", value)\n\nfun Tag<HTMLTextAreaElement>.selectionEnd(value: Int?) = attr(\"selectionend\", value)\nfun Tag<HTMLTextAreaElement>.selectionEnd(value: Flow<Int?>) = attr(\"selectionend\", value)\n\nfun Tag<HTMLTextAreaElement>.selectionDirection(value: String?) = attr(\"selectiondirection\", value)\nfun Tag<HTMLTextAreaElement>.selectionDirection(value: Flow<String?>) = attr(\"selectiondirection\", value)\n\n\n/*\n * HTMLKeygenElement attributes\n */\nfun Tag<HTMLKeygenElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLKeygenElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLKeygenElement>.challenge(value: String) = attr(\"challenge\", value)\nfun Tag<HTMLKeygenElement>.challenge(value: Flow<String>) = attr(\"challenge\", value)\n\nfun Tag<HTMLKeygenElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLKeygenElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLKeygenElement>.keytype(value: String) = attr(\"keytype\", value)\nfun Tag<HTMLKeygenElement>.keytype(value: Flow<String>) = attr(\"keytype\", value)\n\nfun Tag<HTMLKeygenElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLKeygenElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLOutputElement attributes\n */\nfun Tag<HTMLOutputElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLOutputElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLOutputElement>.defaultValue(value: String) = attr(\"defaultvalue\", value)\nfun Tag<HTMLOutputElement>.defaultValue(value: Flow<String>) = attr(\"defaultvalue\", value)\n\nfun Tag<HTMLOutputElement>.value(value: String) {\n    domNode.value = value\n    domNode.defaultValue = value\n    domNode.setAttribute(\"value\", value)\n}\n\nfun Tag<HTMLOutputElement>.value(value: Flow<String>) {\n    mountSimple(job, value) { v -> value(v) }\n}\n\n\n/*\n * HTMLProgressElement attributes\n */\nfun Tag<HTMLProgressElement>.value(value: Double) = attr(\"value\", value)\nfun Tag<HTMLProgressElement>.value(value: Flow<Double>) = attr(\"value\", value)\n\nfun Tag<HTMLProgressElement>.max(value: Double) = attr(\"max\", value)\nfun Tag<HTMLProgressElement>.max(value: Flow<Double>) = attr(\"max\", value)\n\n\n/*\n * HTMLMeterElement attributes\n */\nfun Tag<HTMLMeterElement>.value(value: Double) = attr(\"value\", value)\nfun Tag<HTMLMeterElement>.value(value: Flow<Double>) = attr(\"value\", value)\n\nfun Tag<HTMLMeterElement>.min(value: Double) = attr(\"min\", value)\nfun Tag<HTMLMeterElement>.min(value: Flow<Double>) = attr(\"min\", value)\n\nfun Tag<HTMLMeterElement>.max(value: Double) = attr(\"max\", value)\nfun Tag<HTMLMeterElement>.max(value: Flow<Double>) = attr(\"max\", value)\n\nfun Tag<HTMLMeterElement>.low(value: Double) = attr(\"low\", value)\nfun Tag<HTMLMeterElement>.low(value: Flow<Double>) = attr(\"low\", value)\n\nfun Tag<HTMLMeterElement>.high(value: Double) = attr(\"high\", value)\nfun Tag<HTMLMeterElement>.high(value: Flow<Double>) = attr(\"high\", value)\n\nfun Tag<HTMLMeterElement>.optimum(value: Double) = attr(\"optimum\", value)\nfun Tag<HTMLMeterElement>.optimum(value: Flow<Double>) = attr(\"optimum\", value)\n\n\n/*\n * HTMLFieldSetElement attributes\n */\nfun Tag<HTMLFieldSetElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLFieldSetElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLFieldSetElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLFieldSetElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLLegendElement attributes\n */\nfun Tag<HTMLLegendElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLLegendElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLDetailsElement attributes\n */\nfun Tag<HTMLDetailsElement>.open(value: Boolean, trueValue: String = \"\") = attr(\"open\", value, trueValue)\nfun Tag<HTMLDetailsElement>.open(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"open\", value, trueValue)\n\n\n/*\n * HTMLMenuElement attributes\n */\nfun Tag<HTMLMenuElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLMenuElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLMenuElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLMenuElement>.label(value: Flow<String>) = attr(\"label\", value)\n\nfun Tag<HTMLMenuElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLMenuElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\n\n/*\n * HTMLMenuItemElement attributes\n */\nfun Tag<HTMLMenuItemElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLMenuItemElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLMenuItemElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLMenuItemElement>.label(value: Flow<String>) = attr(\"label\", value)\n\nfun Tag<HTMLMenuItemElement>.icon(value: String) = attr(\"icon\", value)\nfun Tag<HTMLMenuItemElement>.icon(value: Flow<String>) = attr(\"icon\", value)\n\nfun Tag<HTMLMenuItemElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLMenuItemElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLMenuItemElement>.checked(value: Boolean, trueValue: String = \"\") = attr(\"checked\", value, trueValue)\nfun Tag<HTMLMenuItemElement>.checked(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"checked\", value, trueValue)\n\nfun Tag<HTMLMenuItemElement>.radiogroup(value: String) = attr(\"radiogroup\", value)\nfun Tag<HTMLMenuItemElement>.radiogroup(value: Flow<String>) = attr(\"radiogroup\", value)\n\nfun Tag<HTMLMenuItemElement>.default(value: Boolean, trueValue: String = \"\") = attr(\"default\", value, trueValue)\nfun Tag<HTMLMenuItemElement>.default(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"default\", value, trueValue)\n\n\n/*\n * HTMLDialogElement attributes\n */\nfun Tag<HTMLDialogElement>.open(value: Boolean, trueValue: String = \"\") = attr(\"open\", value, trueValue)\nfun Tag<HTMLDialogElement>.open(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"open\", value, trueValue)\n\nfun Tag<HTMLDialogElement>.returnValue(value: String) = attr(\"returnvalue\", value)\nfun Tag<HTMLDialogElement>.returnValue(value: Flow<String>) = attr(\"returnvalue\", value)\n\n\n/*\n * HTMLScriptElement attributes\n */\nfun Tag<HTMLScriptElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLScriptElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLScriptElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLScriptElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLScriptElement>.charset(value: String) = attr(\"charset\", value)\nfun Tag<HTMLScriptElement>.charset(value: Flow<String>) = attr(\"charset\", value)\n\nfun Tag<HTMLScriptElement>.async(value: Boolean, trueValue: String = \"\") = attr(\"async\", value, trueValue)\nfun Tag<HTMLScriptElement>.async(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"async\", value, trueValue)\n\nfun Tag<HTMLScriptElement>.defer(value: Boolean, trueValue: String = \"\") = attr(\"defer\", value, trueValue)\nfun Tag<HTMLScriptElement>.defer(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"defer\", value, trueValue)\n\nfun Tag<HTMLScriptElement>.crossOrigin(value: String?) = attr(\"crossorigin\", value)\nfun Tag<HTMLScriptElement>.crossOrigin(value: Flow<String?>) = attr(\"crossorigin\", value)\n\nfun Tag<HTMLScriptElement>.nonce(value: String) = attr(\"nonce\", value)\nfun Tag<HTMLScriptElement>.nonce(value: Flow<String>) = attr(\"nonce\", value)\n\nfun Tag<HTMLScriptElement>.event(value: String) = attr(\"event\", value)\nfun Tag<HTMLScriptElement>.event(value: Flow<String>) = attr(\"event\", value)\n\nfun Tag<HTMLScriptElement>.`for`(value: String) = attr(\"for\", value)\nfun Tag<HTMLScriptElement>.`for`(value: Flow<String>) = attr(\"for\", value)\n\n\n/*\n * HTMLSlotElement attributes\n */\nfun Tag<HTMLSlotElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLSlotElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLCanvasElement attributes\n */\nfun Tag<HTMLCanvasElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLCanvasElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\nfun Tag<HTMLCanvasElement>.height(value: Int) = attr(\"height\", value)\nfun Tag<HTMLCanvasElement>.height(value: Flow<Int>) = attr(\"height\", value)\n\n\n/*\n * HTMLAppletElement attributes\n */\nfun Tag<HTMLAppletElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLAppletElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLAppletElement>.alt(value: String) = attr(\"alt\", value)\nfun Tag<HTMLAppletElement>.alt(value: Flow<String>) = attr(\"alt\", value)\n\nfun Tag<HTMLAppletElement>.archive(value: String) = attr(\"archive\", value)\nfun Tag<HTMLAppletElement>.archive(value: Flow<String>) = attr(\"archive\", value)\n\nfun Tag<HTMLAppletElement>.code(value: String) = attr(\"code\", value)\nfun Tag<HTMLAppletElement>.code(value: Flow<String>) = attr(\"code\", value)\n\nfun Tag<HTMLAppletElement>.codeBase(value: String) = attr(\"codebase\", value)\nfun Tag<HTMLAppletElement>.codeBase(value: Flow<String>) = attr(\"codebase\", value)\n\nfun Tag<HTMLAppletElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLAppletElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLAppletElement>.hspace(value: Int) = attr(\"hspace\", value)\nfun Tag<HTMLAppletElement>.hspace(value: Flow<Int>) = attr(\"hspace\", value)\n\nfun Tag<HTMLAppletElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLAppletElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLAppletElement>.`object`(value: String) = attr(\"object\", value)\nfun Tag<HTMLAppletElement>.`object`(value: Flow<String>) = attr(\"object\", value)\n\nfun Tag<HTMLAppletElement>.vspace(value: Int) = attr(\"vspace\", value)\nfun Tag<HTMLAppletElement>.vspace(value: Flow<Int>) = attr(\"vspace\", value)\n\nfun Tag<HTMLAppletElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLAppletElement>.width(value: Flow<String>) = attr(\"width\", value)\n\n\n/*\n * HTMLMarqueeElement attributes\n */\nfun Tag<HTMLMarqueeElement>.behavior(value: String) = attr(\"behavior\", value)\nfun Tag<HTMLMarqueeElement>.behavior(value: Flow<String>) = attr(\"behavior\", value)\n\nfun Tag<HTMLMarqueeElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLMarqueeElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\nfun Tag<HTMLMarqueeElement>.direction(value: String) = attr(\"direction\", value)\nfun Tag<HTMLMarqueeElement>.direction(value: Flow<String>) = attr(\"direction\", value)\n\nfun Tag<HTMLMarqueeElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLMarqueeElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLMarqueeElement>.hspace(value: Int) = attr(\"hspace\", value)\nfun Tag<HTMLMarqueeElement>.hspace(value: Flow<Int>) = attr(\"hspace\", value)\n\nfun Tag<HTMLMarqueeElement>.loop(value: Int) = attr(\"loop\", value)\nfun Tag<HTMLMarqueeElement>.loop(value: Flow<Int>) = attr(\"loop\", value)\n\nfun Tag<HTMLMarqueeElement>.scrollAmount(value: Int) = attr(\"scrollamount\", value)\nfun Tag<HTMLMarqueeElement>.scrollAmount(value: Flow<Int>) = attr(\"scrollamount\", value)\n\nfun Tag<HTMLMarqueeElement>.scrollDelay(value: Int) = attr(\"scrolldelay\", value)\nfun Tag<HTMLMarqueeElement>.scrollDelay(value: Flow<Int>) = attr(\"scrolldelay\", value)\n\nfun Tag<HTMLMarqueeElement>.trueSpeed(value: Boolean, trueValue: String = \"\") = attr(\"truespeed\", value, trueValue)\nfun Tag<HTMLMarqueeElement>.trueSpeed(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"truespeed\", value, trueValue)\n\nfun Tag<HTMLMarqueeElement>.vspace(value: Int) = attr(\"vspace\", value)\nfun Tag<HTMLMarqueeElement>.vspace(value: Flow<Int>) = attr(\"vspace\", value)\n\nfun Tag<HTMLMarqueeElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLMarqueeElement>.width(value: Flow<String>) = attr(\"width\", value)\n\n\n/*\n * HTMLFrameSetElement attributes\n */\nfun Tag<HTMLFrameSetElement>.cols(value: String) = attr(\"cols\", value)\nfun Tag<HTMLFrameSetElement>.cols(value: Flow<String>) = attr(\"cols\", value)\n\nfun Tag<HTMLFrameSetElement>.rows(value: String) = attr(\"rows\", value)\nfun Tag<HTMLFrameSetElement>.rows(value: Flow<String>) = attr(\"rows\", value)\n\n\n/*\n * HTMLFrameElement attributes\n */\nfun Tag<HTMLFrameElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLFrameElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLFrameElement>.scrolling(value: String) = attr(\"scrolling\", value)\nfun Tag<HTMLFrameElement>.scrolling(value: Flow<String>) = attr(\"scrolling\", value)\n\nfun Tag<HTMLFrameElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLFrameElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLFrameElement>.frameBorder(value: String) = attr(\"frameborder\", value)\nfun Tag<HTMLFrameElement>.frameBorder(value: Flow<String>) = attr(\"frameborder\", value)\n\nfun Tag<HTMLFrameElement>.longDesc(value: String) = attr(\"longdesc\", value)\nfun Tag<HTMLFrameElement>.longDesc(value: Flow<String>) = attr(\"longdesc\", value)\n\nfun Tag<HTMLFrameElement>.noResize(value: Boolean, trueValue: String = \"\") = attr(\"noresize\", value, trueValue)\nfun Tag<HTMLFrameElement>.noResize(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"noresize\", value, trueValue)\n\nfun Tag<HTMLFrameElement>.marginHeight(value: String) = attr(\"marginheight\", value)\nfun Tag<HTMLFrameElement>.marginHeight(value: Flow<String>) = attr(\"marginheight\", value)\n\nfun Tag<HTMLFrameElement>.marginWidth(value: String) = attr(\"marginwidth\", value)\nfun Tag<HTMLFrameElement>.marginWidth(value: Flow<String>) = attr(\"marginwidth\", value)\n\n\n/*\n * HTMLDirectoryElement attributes\n */\nfun Tag<HTMLDirectoryElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLDirectoryElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\n\n/*\n * HTMLFontElement attributes\n */\nfun Tag<HTMLFontElement>.color(value: String) = attr(\"color\", value)\nfun Tag<HTMLFontElement>.color(value: Flow<String>) = attr(\"color\", value)\n\nfun Tag<HTMLFontElement>.face(value: String) = attr(\"face\", value)\nfun Tag<HTMLFontElement>.face(value: Flow<String>) = attr(\"face\", value)\n\nfun Tag<HTMLFontElement>.size(value: String) = attr(\"size\", value)\nfun Tag<HTMLFontElement>.size(value: Flow<String>) = attr(\"size\", value)\n","package dev.fritz2.examples.routing\n\nimport dev.fritz2.core.*\nimport dev.fritz2.routing.routerOf\nimport kotlinx.coroutines.flow.map\n\nobject Pages {\n    const val home = \"Home\"\n    const val show = \"Show\"\n    const val change = \"Change\"\n}\n\nobject Roles {\n    const val anonymous = \"anonymous\"\n    const val user = \"user\"\n    const val admin = \"admin\"\n}\n\nfun main() {\n\n    val router = routerOf(mapOf(\"page\" to Pages.home))\n\n    render(\"#target\") {\n        div {\n            nav(\"navbar navbar-expand-lg navbar-light bg-light\") {\n                span(\"navbar-brand\") {\n                    +\"Routing\"\n                }\n                button(\"navbar-toggler\") {\n                    attr(\"data-toggle\", \"collapse\")\n                    attr(\"data-target\", \"#navbarContent\")\n\n                    span(\"navbar-toggler-icon\") {}\n                }\n\n                div(\"collapse navbar-collapse\", id = \"navbarContent\") {\n                    ul(\"navbar-nav mr-auto\") {\n                        li(\"btn nav-item\") {\n                            className(router.data.map {\n                                if (it.containsValue(Pages.home)) \"active\" else \"\"\n                            })\n\n                            a(\"nav-link\") {\n                                +Pages.home\n\n                                clicks.map {\n                                    mapOf(\n                                            \"page\" to Pages.home\n                                    )\n                                } handledBy router.navTo\n                            }\n                        }\n                        li(\"btn nav-item\") {\n                            className(router.data.map {\n                                if (it.containsValue(Pages.show)) \"active\" else \"\"\n                            })\n\n                            a(\"nav-link\") {\n                                +Pages.show\n\n                                clicks.map {\n                                    mapOf(\n                                            \"page\" to Pages.show,\n                                            \"extra\" to \"extra text\"\n                                    )\n                                } handledBy router.navTo\n                            }\n                        }\n                        li(\"btn nav-item\") {\n                            className(router.data.map {\n                                if (it.containsValue(Pages.change)) \"active\" else \"\"\n                            })\n\n                            a(\"nav-link\") {\n                                +Pages.change\n\n                                clicks.map {\n                                    mapOf(\n                                            \"page\" to Pages.change,\n                                            \"debug\" to false.toString(),\n                                            \"role\" to Roles.anonymous\n                                    )\n                                } handledBy router.navTo\n                            }\n                        }\n                    }\n                }\n            }\n            div(\"card\") {\n                router.select(\"page\").render { (value, route) ->\n                    when (value) {\n                        Pages.home ->\n                            div(\"card-body\") {\n                                h5(\"card-title\") {\n                                    +Pages.home\n                                }\n                                p(\"card-text\") {\n                                    +\"\"\"|Lorem ipsum dolor sit amet, consetetur sadipscing elitr,\n                                        |sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat,\n                                        |sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. \n                                        |Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\"\".trimMargin()\n                                }\n                            }\n                        Pages.show ->\n                            div(\"card-body\") {\n                                h5(\"card-title\") {\n                                    +Pages.show\n                                }\n                                div(\"form-group\") {\n                                    label {\n                                        +\"Extra parameter\"\n                                    }\n                                    div(\"form-control\") {\n                                        +(route[\"extra\"] ?: \"\")\n                                        attr(\"readonly\", \"true\")\n                                    }\n                                }\n                            }\n                        Pages.change ->\n                            div(\"card-body\") {\n                                h5(\"card-title\") {\n                                    +Pages.change\n                                }\n                                div(\"form-group\") {\n                                    label {\n                                        +\"Debug\"\n                                    }\n                                    div(\"form-check\") {\n                                        input(\"form-check-input\", id = \"debug\") {\n                                            type(\"checkbox\")\n                                            checked(route[\"debug\"]?.toBoolean() ?: false)\n\n                                            changes.states().map { checked ->\n                                                route + (\"debug\" to checked.toString())\n                                            } handledBy router.navTo\n                                        }\n                                        label(\"form-check-label\") {\n                                            `for`(\"debug\")\n                                            +\"enable debug flag\"\n                                        }\n                                    }\n                                }\n                                div(\"form-group\") {\n                                    label {\n                                        +\"Role\"\n                                    }\n                                    select(\"form-control\") {\n                                        option {\n                                            +Roles.anonymous\n                                            selected(route[\"role\"] == Roles.anonymous)\n                                        }\n                                        option {\n                                            +Roles.user\n                                            selected(route[\"role\"] == Roles.user)\n                                        }\n                                        option {\n                                            +Roles.admin\n                                            selected(route[\"role\"] == Roles.admin)\n                                        }\n\n                                        changes.selectedText().map { text ->\n                                            route + (\"role\" to text)\n                                        } handledBy router.navTo\n                                    }\n                                }\n                            }\n                        else ->\n                            div(\"card-body\") {\n                                h5(\"card-title\") {\n                                    +\"Page not found\"\n                                }\n                                p(\"card-text\") {\n                                    +\"\"\"¯\\_(ツ)_/¯\"\"\"\n                                }\n                            }\n                    }\n                }\n            }\n        }\n    }\n}",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(813);\n"],"names":["root","factory","exports","module","define","amd","this","cause","console","error","printErrorIgnoreLensException","into","target","Job","MainScope","HtmlTag","id","baseClass","content","domNode","setAttribute","name","value","trueValue","removeAttribute","Listener","eventName","capture","init","listener","onEach","flow","launchIn","job","document","querySelector","selector","getElementById","sheet","appendChild","createTextNode","head","getOrCreateGlobalStylesheet","insertRule","css","targetElement","MountTargetNotFoundException","override","clear","message","MountPointImpl","it","removeEventListener","mountPoint","payload","handler","Key","lazy","AnnexContext","Router","MapRoute","defaultRoute","MutableStateFlow","asStateFlow","removePrefix","window","location","hash","preventDefault","addEventListener","param","equalsPos","decodeURIComponent","key","element","awaitClose","undefined","fritz2StopPropagation","checked","options","selectedIndex","text","classesToAdd","e","a","DomLifecycleListener","cancel","distinctUntilChanged","collect","classes","parentElement","combine","updateClasses","newRoute","encodeURIComponent","MapRouter","mapOf","toString","routerOf","route","type","toBoolean","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}